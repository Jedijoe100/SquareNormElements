#! /bin/sh
#
# This file is part of the PARI/GP package.
#  
# PARI/GP is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation. It is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY WHATSOEVER.
# 
# Check the License for details. You should have received a copy of it, along
# with the package; see the file 'COPYING'. If not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# Configuration file for GP/PARI.  Run Configure -help for Usage.
#
# Perl's Configure and GNU autoconfig were of much help in writing these files.
# $Id$

# Directories
TOP=`pwd`
config_dir=config
data_dir=data
doc_dir=doc
emacs_dir=emacs
examples_dir=examples
misc_dir=misc
src_dir=src
extract_dir_list="$doc_dir $emacs_dir $misc_dir" # for extract_files

# Version number and patch level.
. $config_dir/version
version=$VersionMajor.$VersionMinor
pari_release="$version.$patch"
if test `expr $VersionMinor % 2` = 1; then
  pari_release_verbose="$pari_release (STABLE)"
  libpari_base=pari
else
  pari_release_verbose="$pari_release (DEVELOPMENT VERSION)"
  libpari_base=pari-$version
fi
echo "Configuring pari-$pari_release_verbose"

cd $config_dir
# Process options, initialize
. ./get_config_options
####################### CONFIGURE - SHELL ###################################
. ./get_nl # how to get echo without \n ? (for config questions)
. ./get_PATH
#  We might need the following :
echo Looking for some tools first ...
list='ld zcat gzip ranlib perl emacs'
pathspace=`echo $PATH | sed -e "s/$dir_sep/ /g" | sed -e 's,\\\\,/,g'`

for file in $list; do
  x=`./locate $file '' $pathspace`
  eval $file=$x
  case $x in
# support also DOS filesystems (hard drive prepended)
   ?:/*|/*) echo ..."$file is $x";;
      *) echo ..."I could not find $file." >&2;;
  esac
done
if test -z "$zcat" -a -n "$gzip"; then zcat="$gzip -dc"; fi

####################### CONFIGURE - ARCHITECTURE ############################
. ./get_archos # arch, osname, asmarch, pretty, prettyk
####################### CONFIGURE - COMPILATION #############################
# Which optimization ?
if test "$fastread" != yes; then
  cat << EOT
==========================================================================
The default is to fully optimize the compilation. You may choose to build
  an executable for debugging or profiling instead. Choose among :
       full       debugging       profiling
EOT
  echo $n ..."Which optimization do you prefer ? $c"
  dflt=$optimization; rep='full debugging profiling'; . ./myread
  optimization=$ans
fi

. ./get_cc   # CC, CFLAGS, CPP, exe_suff, extraflag
. ./get_as   # AS, ASFLAGS
. ./get_ld   # LD, LDFLAGS
. ./get_dlld # DLLD, DLLDFLAGS, EXTRADLLDFLAGS
if test "$fastread" != yes; then
  cat << EOT
==========================================================================
Should you change your mind, you only need to modify the lines
    CC="$CC"
    CFLAGS="$cflags"
    LD="$LD"
    LDFLAGS="$LDFLAGS"
    DLLD="$DLLD"
    DLLDFLAGS="$DLLDFLAGS"
in the Makefile
==========================================================================
EOT
fi

####################### CONFIGURE - LIBC ####################################
. ./get_double_format # doubleformat, sizeof_long, update pretty
. ./get_libc # has_*, _has_list
####################### CONFIGURE - LIBRARIES ###############################
# Looking for libraries: X11, gnuplot, readline
if test "$optimization" != profiling; then
  . ./get_libpth
  echo Checking for optional libraries and headers...
  . ./get_X11  # X11, Xincroot, extralib
  . ./get_gnuplot_libs # gnuplot, gnuplot_libs
  . ./get_readline # readline, rl_fullname, rl_include, CPPF_defined
                   # rl_message, rl_completion_matches, rl_completion_func_t
                   # rl_refresh_line_oldproto, rl_appendchar, rl_genericbind
                   # rl_save_prompt, _rl_save_prompt, readline_enabledp
  . ./get_graphic_lib # which_graphic_lib, graphic_lib_dll
  if test -z "$X11$gnuplot$readline" \
          -a "X$which_graphic_lib" != Xgnuplot-dynamic; then
    echo ...none
  fi
fi
####################### CONFIGURE - MAKE ####################################
. ./get_install # bindir includedir mandir miscdir libdir datadir
. ./get_objdir  # objdir
. ./get_static  # static
# For dynamic linking, before and after installing
case "$osname" in
  *cygwin*) LDDYN="-L$libdir -lpari_dll" ; runpath="$libdir" ;
	    DYNLIBS=-lpari_dll ; DYNFLAGS=-Dlibpari_USE_DLL ;;
  *)        LDDYN="-L$libdir -l$libpari_base" ; runpath="$libdir" ;;
esac

# Which copy, SHELL ?
case "$osname-$arch" in
  os2-*) ln_s=cp;      make_sh=sh;;
  *)     ln_s="ln -s"; make_sh="/bin/sh";;
esac
####################### CONFIGURE - CLEANUP #################################
rm -f gmon.out # created by Configure -pg

####################### CONFIGURE - SPIT ####################################
# Now spit out the results
cat << EOT
==========================================================================
EOT
cd $TOP
if test ! -d $objdir; then mkdir -p $objdir; fi
dflt_conf_file=$objdir/$dflt_conf_file

cat > $dflt_conf_file << EOT
# Config file for Pari $release -- $pretty

EOT
case "$osname" in
  os2) shell_q='"'; echo "shell_q='\"'"  >> $dflt_conf_file;;
    *) shell_q="'"; echo "shell_q=\"'\"" >> $dflt_conf_file;;
esac

for variable in\
  pari_release pari_release_verbose\
  libpari_base version TOP config_dir src_dir emacs_dir doc_dir\
  bindir includedir mandir miscdir libdir datadir\
  optimization objdir static suffix\
  ASMINLINE arch asmarch osname pretty prefix share_prefix\
  __gnuc__ gnuas CPP AS ASFLAGS CC cflags DBGFLAGS OPTFLAGS LD LDFLAGS\
  DLLD DLSUFFIX soname sodest KERNELCPPFLAGS DLLDFLAGS EXTRADLLDFLAGS\
  runpath runpathprefix LDDYN LIBS DYNLIBS DYNFLAGS DYNRELOC\
  ranlib gzip zcat emacs perl ln_s make_sh exe_suff\
  readline readline_enabledp CPPF_defined rl_refresh_line_oldproto\
  rl_appendchar rl_genericbind rl_save_prompt _rl_save_prompt rl_message\
  rl_completion_matches rl_completion_func_t\
  RLINCLUDE RLLIBS\
  sizeof_long doubleformat\
  gnuplot extralib X11 Xincroot which_graphic_lib gnuplot_libs graphic_lib_dll\
  $_has_list; do
  eval "echo $variable=\'"'$'"$variable\'" \>\> $dflt_conf_file
done

. $config_dir/extract_files

#  Building...
cat << EOT
==========================================================================
EOT

echo $n "Shall we try to build pari $version.$patch ($status) now (y/n)? $c"
dflt=n; rep='y n'; . $config_dir/myread

cdobjdir=
if test "$objdir" != "$cst_objdir"; then 
  cdobjdir="cd $objdir; "
fi

case $ans in
y) if (cd $objdir; make gp); then
     echo $n "Shall we install the files where they belong (y/n)? $c"
     dflt=n; rep='y n'; . $config_dir/myread
     case $ans in
       y) make install;;
       n) echo "Ok. Type \"${cdobjdir}make install\" when you are ready";;
     esac
   fi;;
n) echo "Ok. Type \"${cdobjdir}make install\" when you are ready";;
esac
echo 'Bye !'
