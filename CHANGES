# $Id$
Bug numbers refer to the BTS at http://pari.math.u-bordeaux.fr/Bugs/

Done for version 2.8.0 (released ??/??/2014):

  Fixed
    1- make install fails on OS/X: ln -s libpari.dylib libpari.dylib fails
    2- Q_pvalrem(t_FRAC) => wrong result
    3- [] == 0 but []~ != 0  (now []~ == 0 as well) [#1560]
BA  4- test-kernel did not work when using --mt=pthread
BA  5- ellheegner was using too much memory in some case
    6- ellap can overflow on 32-bit machine [#1558]
       ellap(ellinit([582304190,64196421]),2147438927) -> overflow
       ellap(ellinit([-1137195,489565862]),2038074751) -> wrong result
    7- nfhilbert(K,x,y, P above 2) could give wrong results [#1561]
    8- rnfkummer sometimes failed to return an answer: error or oo loop.
       Relied on exhaustive enumeration of an Fp-vector space, some of
       whose elements would trigger an error. Replace by Fp-linear algebra
       that directly picks the correct line (O(d^3) algo instead of O(p^d),
       and no failures). Only compute the defining poly for the right element.
XR  9- padicfields(huge p, d) was very slow [even though ramification is tame]
   10- gcd(1/2, 1+I*1.) -> SEGV [#1563], 2.5.5 returned the wrong answer 1/2
   11- mathnf(t_VEC) could corrupt input (change sign)
   12- [libpari] RgM_transmul did not work
   13- [libpari] Fq_issquare didn't support T=NULL
   14- [libpari] nfpow_u didn't handle non-integral rational numbers
   15- eint1(0) -> stack overflow [#1568]

  Added
    1- add optional argument to sumdigits to specify the base
    2- [libpari] bits_to_int,bits_to_u,binary_zv,binary_2k,binary_2k_zv
BA  3- [GP] support for variadic GP functions (f(v[..])=expr)
    4- nfeltval(K, x, pr, &y) now takes an optional 4th argument, containing
       the part of x coprime to pr.
BA  5- [libpari] New functions family RgXn: new functions RgXnV_red_shallow,
       RgXn_powers, RgX_RgXnV_eval, RgX_RgXn_eval, RgXn_reverse, RgXn_inv,
       RgXn_exp
BA  6- [libpari] New functions Flv_inv
BA  7- [libpari] New functions Flx_Flv_eval, Flv_FlvV_polint
WH  8- [libpari] New low-level functions get_Fl_inv, remll_pre
BA  9- [libpari] New low-level functions Fl_sqr_pre, Fl_mul_pre, remlll_pre,
       Fl_powu_pre
   10- [TeX documentation] new primitive \url (verbatim arg)
   11- [libpari] New functions Fq_log, gener_Fq_local
BA 12- GP functions bnrisgalois, bnrgaloismatrix, bnrgaloisapply
LGr13- GP function polrootsreal
   14- GP constant "oo" (for +/- infinity)
   15- [libpari] New functions mkoo, mkmoo, inf_get_sign
   16- [libpari] New functions ellbasechar, ec_f_evalx, ec_dfdx_evalQ,
   ec_dfdy_evalQ, ec_2divpol_evalx, ec_half_deriv_2divpol_evalx
HIL17- GP functions ellisogeny, ellisogenyapply
   18- [libpari] New function RgX_coeff
BA 19- [libpari] New functions Fl_halve, Fp_halve, Flx_halve, Fq_halve
BA 20- [libpari] New functions vecsmallpermute, vec_append
   21- GP functions qfsolve, qfparam [ adapted from Denis Simon's qfsolve.gp ]
   22- [libpari] New function ZM_transmul
   23- allow elliptic curves over number fields: ellinit([a1,...,a5], nf)
   24- [libpari] ZX_sturm, ZX_sturmpart, RgX_sturmpart

  Changed
    1- make log(+/-I) return (+/-)Pi/2*I with gen_0 real part [#1556]
BA  2- [libpari] rename RgX_mullow -> RgXn_mul, RgX_sqrlow -> RgXn_sqr,
    RgX_modXn_eval -> RgXn_eval, RgX_modXn_shallow-> RgXn_red_shallow
    3- change rnfnormgroup to return [;] instead of raising an error whenever
    it detects a problem (modulus not a multiple of the conductor, non-abelian
    extension...): this is a BIB with undefined result, but returning a
    sentinel is more useful *if* we notice it.
    4- [gp] uniformize errors from the % history operator (SYNTAX->MISC) [#1553]
    5- t_STR used to compare as larger than any real number via < or >
       operators. Such a comparison now raises an exception.
    6- valuation(0,p), nfeltval(nf,0,pr), idealval(nf,0) now all return +oo
       poldegree(0) now returns -oo
BA  7- rootpadicfast renamed ZpX_roots
    8- nfinit: switch from sturm() to ZX_sturm() [Uspensky], and from polroots
       to polrootsreal (totally real fields). polsturm() now uses Uspensky in
       most cases.
    9- polsturm interface change
         - polsturm(T, a, b) is still supported but deprecated, use
           polsturm(T, [a,b])

         - polsturm(T, a, b) used to return the number of roots in ]a,b],
           we now use the closed interval [a,b]: more intuitive given the new
           syntax, and compatible with polrootsreal()
BA 10- [libpari] mkintn: handles arguments as 32bit unsigned int
