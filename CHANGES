# $Id$
Bug numbers refer to the BTS at http://pari.math.u-bordeaux.fr/Bugs/

Done for version 2.4.2 (released ??/??/2006):

  Fixed
    1- divrs(0., negative integer) had the wrong exponent
    2- vecsort(,,4) was broken in 2.4.1
    3- allocatemem(z) didn't check that z >= 0 [#556]
    4- remove hack in internal function 'readbin' that used the clone bit as
    a special marker hence returned an invalid object, which could be
    propagated to higher level public functions.
BA  5- sqrtn(Mod(a,p),..) and factorff() were broken in 2.4.1
BA  6- bitnegimply(1,2^65) returned a wrong result [#560]
    7- nfeltreduce(nf,t_POLMOD,id) didn't work [#558]
    8- [library] missing function intfourierexp()
    9- segv in polrootspadic / repeated roots in FpX_root (only in deg 2) [#562]
   10- log(2+O(4^4)) --> oo loop
   11- log(exp(1e-100)) -> 1.000000000149525401279188592 E-100 
       [ for some accuracies, log & exp inacurate near 1 and 0 resp. ]
   12- numbpart inaccurate (and slow). E.g numbpart(52602) off by 1 [#557]. 
BA 13- &, |, && and || were right-associative instead of left-associative 
   14- remove type assumptions in mulcxI, mulcxmI: unsafe [#516]]
   15- too much memory allocated to print real numbers
   16- (y/x)/(x^0/y) not correctly simplified
   17- \s reported a misleading number of available user variables
   18- 1/(quadgen(-4)*x)+0. -> exponent overflow [#591]
   19- sumpos(x=1,1/x^2,1) had the wrong sign [#587]
   20- matrixqz(x,0) would not work if first two determinants were 0
       + might lose pointers in gerepile
   21- sumpos(x=1,0) -> oo loop [#585]
   22- qfminim([[;]],,,2) --> SEGV [#598]
   23- intformal(1) --> incorrect object
   24- intformal(y,x) --> y*y
   25- matadjoint(0) --> gerepile error
   26- prodinf(x=0,0), prodinf(x=0,-1,1) --> oo loop
   27- agm(-1, 1+1e-55) --> oo loop, agm(-1,1) --> wrong result
LGr28- killing hi-res graphic window created zombie process (missing wait())
   29- missing type check in eint1(x,n)
   30- ploth(...) + Ctrl-C --> hi-res graphic window killed [use pari_daemon()]
   31- quadgen([]) --> incorrect object [#606]
   32- hyperu(0,1,1) --> oo loop [#608]
   33- fix headers so that ulong is always defined
   34- read("a b.gz")   \\ filename contains a space
       gzip: ./a.gz: No such file or directory
   35- logagmcx inaccurate [ used for log(t_COMPLEX), large precision ]
   36- RgX_divrem: prevent "impossible" situations for weird base rings
       1/ Mod((y-1)*x-1, Mod(2,6)*x^3-Mod(1,2)*x^2-1) --> SEGV
   37- gclone didn't work on t_INTs with lg > lgefint
   38- GC error in add_rfrac() [#612]
   39- missing type check in subgrouplist [#616]
   40- inconsistent type checking in nfeltdivmodpr [#617]
   41- nfdisc(x^32+24888960*x^30+227077545803904*x^28+887225199431341086720*x^26+1145458263702669503266741248*x^24-459489127319699704284694158213120*x^22+73430099675988831740428200872826863616*x^20-6599321778961370851005469933592282336329728*x^18+369563540304176984501448638025309170375722401792*x^16-13214618078037183940422584396181416089308059714715648*x^14+291247424536170563676138246427605494527806096141868597248*x^12-3407227562250271661213064368167141844394234574629997803208704*x^10+8699659624155196549893192408316795253695601521375537680749690880*x^8+153390110447793800411208197070089975539253907830958400507847198638080*x^6-34704742472413552993642506624568826441560550586777137133227202205188096*x^4+43389826962123095743039577910848855441856968086933919852164410699581227008*x^2+336462877895453750216450425189196151877685043455706101021513167474262016, 1)
       --> "not a prime" error (help Round4 to recover when using non-primes,
       instead of raising immediate errors) [#624]
   42- vecextract: C14 in 2.4.0 didn't work for large masks [#623]
   43- clean up version handling: move version setting code to config/version
       and always set PARIVERSION from CHANGES if 'CVS' [ used to require
       a 'Configure' ]
   44- zeta(0e1) --> SEGV [#627], exp(0e1*I) --> SEGV [#630]
   45- exp(2^200*I) --> catastrophic cancellation [cos/sin were OK] [#631]
DE 46- on NFS filesystems, make install would rebuild all [#503]
   47- default(compatible,3); default(compatible,1) --> case no longer taken
       into account [#629]
   48- missing GC in 'sigma'
   49- eta(x): valuation would overflow if seriesprecision is large
   50- typo in src/kernel/none/mp.c:convi --> inefficiency
   51- concat(v) used too much memory (quadratic in #v, make it linear) [#634]

  Changed
BA  1- The combined GP parser/evaluator has been replaced by a bytecode
       compiler and a bytecode evaluator
BA  2- install(): parser code 'E' and 'I' now refer to closures, not strings:
       'I': closure whose value is ignored, like in for() loop
       'E': closure whose value is used, like in sum() loop
    3- Fl_pow renamed to Fl_powu [ exponent may not be negative ]
    4- split usersch3.tex moving function documentation to src/functions/*
    5- simplify table of contents for users.dvi
    6- rename Flx_rand -> random_Flx, FpX_rand -> random_FpX
BA  7- use factor_pn_1 to compute various orders in FF.c
    8- file usersch3.tex is now generated from functions/*
    9- rewrote logr_abs [ inaccurate + slow for x = 2^k * (1 - epsilon) ]
   10- rewrote exp1r_abs [ inaccurate + slow ]  and mpexp_basecase [ reduce
       input mod log(2) ]
   11- rewrote mpsc1 [ slow ] -> faster sin and cos
   12- [library] rename pointch ->  ellchangepoint, coordch -> ellchangecurve
   13- prototype of constpi, consteuler.
   14- use a little less memory to compute pi, euler, log(2)
   15- qfminim(x,b,m,flag) made 'm' parameter optionnal also when flag=0
   16- made second argument to matrixqz optional, allow non-prime values
   17- matpascal(n < -1), mathilbert(n < 0) now raise an error
   18- add optional extra argument to ffprimroot, fforder, fflog
   19- allow znlog(x,g) where g a t_PADIC or an t_INTMOD modulo any N
       that znprimroot(N) would accept
   20- log(x t_PADIC): check whether x = 1 (mod p) before replacing x <- x^(p-1)
   21- znprimroot(p^k): use isanypower() instead of factor().
       E.g. znprimroot(nextprime(10^20)^1000): 8mn --> 12ms
       znprimroot(N) no longer checks reliably whether (Z/N)^* is cyclic.
       Result undefined if it is not.
   22- padic sqrt much faster [ small and large accuracies ]
   23- let primes() indicate a value of primelimit if unable to answer [#625]
   24- remove variable names from ?0
   25- exp(0e10) returned 1.000, made it 0exxx [ no significant digit ]
MSo26- define polchebyshev(n, 1 or 2), pollegendre(n) for n < 0
   27- znorder faster for non-prime modulus [ try it for Mod(2,5^10*7^10) ]
       (compute lcm of local p-adic orders)
   28- changed icopyifstack / copyifstack macros so that their arguments
       are GENs, not GENs typecast to long.

  Added
    1- library functions expu, adduu, subuu
    2- library functions divisorsu, factor_pn_1 (using cyclotomic factors and
       Aurifeuille), merge_factor
    3- library function divru, dbllog2r
    4- library function ZX_gcd
    5- library function gtos
    6- library function pari_daemon
    7- library function Fp_sqr, padicsqrtlift
    7- library function RgXQ_inv
    8- bench 'extract'
    9- charpoly: Berkowitz division-free algorithm (new default) [#541]
   10- library function phiu

  Removed
    1- obsolete function kbessel2 (now static). Removed optional flag in besselk
    2- Removed obsolete optional flag in ellap(), Mod() and gcd()
    3- Rename gen_search_aux -> gen_search and document it [ old gen_search
       disappears: use tablesearch() ]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Done for version 2.4.1 (released 28/03/2007):
  Fixed
    1- qflll / qflllgram (t_MAT with t_FRAC entries) would not reduce to the
       integer case (--> insufficient precision, SEGV) [#505]
    2- [Cygwin] missing -L... -lgmp when compiling with gmp.
    3- ispower(522^3) -> 0 [ looked like a 7th power to is_357_power(), which
       then forgot to test for cubes ] [#506]
LGr 4- [gphelp] race condition --> incomplete cleanup (improved patch BA)
    5- Cleanup library linking: do not link libpari with -ld [only gp], do
    not link gp with -lgmp [only libpari]. Side effect: libgmp.so no longer
    needed for modules compiled by gp2c-run
    6- when nf.disc < 0, nf.diff was an incorrect PARI ideal [#510]
    7- nf.codiff was only correct up to multiplication by some rational number
       (a divisor of nf.disc) [#510]
    8- inaccuracy (>= 2ulp) in [cached] log(2) [#498]
    9- exp, sinh, asinh, tanh, atanh were inaccurate near 0
   10- [GMP kernel] forvec(x=[[-1,0]],print(x)) --> error [#509]
       [ 'resetloop' failed when passing through '0' ]
   11- nfbasistoalg(nfinit(y),x) created an invalid t_POLMOD
   12- incorrect result in ZX_resultant (accuracy loss in bound computation)
   13- bnfinit(): avoid further precision problems for large degree fields
   14- [Configure] gcc-specific flags were used on linux/freebsd/cygwin, even
       when __gnuc__ was unset
   15- factor( pure power FqX ) --> SEGV
   16- [GMP kernel] polrootsmod(f, 4) --> wrong result [ low level t_INT
       manipulation not using the int_* macros ]
   17- polrootspadic(f, 2, r) --> some roots would be found twice [ due to
       FpX_roots(f, 4) called ]  [#521]
   18- ??sumalt doesn't compile: in GPHELP, treat \ref in verbatim mode [#518]
   20- matinverseimage returned [;] when no pre-image exists. Conform to
       the docs: "an empty vector or matrix", depending on the input types.
   21- [Configure] abort when $CFLAGS is not supported by $CC
   22- 3.5 % 2 --> error [ should be 0.5 ]
   23- sin(1/10^100) --> 0e-28 [ also affected cos,tan,cotan ]
   24- fix e.eta and elleta such that e.eta = 2 ellzeta(e,e.omega/2)
       [ was ellzeta(e,e.omega/2) ]. COMPAT.
   25- elleta(e) was different from elleta(e.omega). Analogous problems
       in all quasi-elliptic functions. COMPAT: change e.omega so that
       e.omega[1] / e.omega[2] belongs to the Poincare half plane [ used
       to be the inverse ]. Together with 24: the Legendre relation now reads 
       w1 e2 - w2 e1 = 2 I Pi
       Rationale: 1) the action of Sl_2(R) becomes the standard one, not a
       twisted one 2) fixes quite a few normalization problems in our code.
   26- check that k >= 0 in thetanullk [#531]
   27- isprime(-2,1) returned 1
   28- Fix 'Not enough precision in thue' error
BA 29- [OS X] Fix kernel detection on x86_64-darwin
   30- Remove "VERY long time" Warning in bnfcertify (few minutes nowadays)
BA 31- missing prototype for documented function ZY_ZXY_rnfequation
   32- sqrt(x^2/y^2) --> SEGV [#536]
   33- \r foo no longer worked if foo was a directory and foo.gp a valid
       input file [#540]
BA 34- [Configure] spectacular failure to recognize gcc under some locales.
   35- polredabs(x^8+2*x^6-5*x^4+78*x^2+9) was incorrect [ missed
       x^8+6*x^6-x^4+54*x^2+25 due to incorrect "skipfirst" ]   [#542]
   36- typo in resmod2n (both kernels) [#546]
   37- At \p28, 0.1 - 0.1 would return 0.E-30 instead of 0.E-29
BA 38- missing prototype for documented function FpX_div_by_X_x
   39- isprime(,0) very slow when primelimit is large [#546]
   40- nfmodprinit could create FpX's which were not reduced mod p
   41- O(x^3)^(1/2) was O(x^2) instead of O(x)
RB 42- the following TODO item:
       v = vector(2); v[1] = v = 0  --> SEGV. Occurs with high probability if
       any variable is "deleted", while it (or part of it) is still in use
       Reference count could be helpful here.
   43- substpol(x^-2+O(x^-1),x^2,x) --> error [#555]
BA 44- [TLS] addss, addsr and subsr were not reentrant.

  Changed
    1- concat(t_VECSMALL, t_VECSMALL) to return the concatenated vector
       [was: a vector with two t_VECSMALL entries]
    2- pariprintf() so that it handles t_STR as print() [ don't include quotes ]
LGr 3- [Makefile] make generated src/funclist independent of locale
    4- Extend Pocklington-Lehmer to the case N-1 = FU, F > N^(1/3)
BA  5- Much faster base-2 to base-10 conversion.
BA  6- FpX_Fp_add() is now clean.
BA  7- rename ZY_ZXY_resultant -> ZX_ZXY_resultant, ZY_ZXY_rnfequation ->
       ZX_ZXY_rnfequation and FpY_FpXY_resultant -> FpX_FpXY_resultant.
BA  8- FpV_polint() now take a variable number as last parameter.
    9- use Miller-Rabin-like improvement in znprimroot and FpXQ_gener
   10- indexrank, indexsort and indexlexsort now return t_VECSMALLs
   11- API for gen_sort, vecsort

  Added
BA  1- derivnum(x=a,expr) for numerical derivations
BA  2- library function strntoGENstr
    3- function Vecrev
BA  4- ppc64 level0 inline assembly kernel
    5- library function floor_safe()
    6- library function itostr()
BA  7- library function Fp_div(), Fp_mul()
BA  8- library function FpXQ_norm()
BA  9- library functions FlxX_resultant() and Flx_FlxY_resultant()
BA 10- library function FlxY_Flx_div()
BA 11- library function Flm_transpose()
BA 12- library function Flx_Fl_add()
BA 13- library function Flxq_div()
BA 14- function stirling (Stirling numbers of 1st and 2nd kind)
BA 15- library function FpX_valrem()
   16- library function Flxq_gener
BA 17- library function Flxq_norm, Flxq_minpoly, Flxq_charpoly
BA 18- [toplevel benchmark] ffisom
BA 19- library functions Fp_order, FpXQ_order, FpXQ_log, FpXQ_sqrtn, 
       Flxq_order, Flxq_log, Flxq_sqrtn 
   20- library functions gen_sort_inplace, gen_indexsort, sort_factor,
       indexvecsort
BA 21- New PARI type t_FFELT and support functions (FF_*) for finite field
       elements.
BA 22- functions ffgen, fforder, fflog, ffprimroot for finite field elements.

  Removed
    1- obsolete functions readexpr(), readexpr_nobreak() 
    2- pariemacs support from Configure
    3- obsolete functions sindexsort, sindexlexsort, sindexrank

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Done for version 2.4.0 (released 06/10/2006):
  Fixed
    1- typo in remiimul: wrong result in a "failsafe" branch (hardly ever
       taken). May affect modular powering /Fp if p >> 10^1300 [#457]
       Also affects the gmp kernel, for p >> 10^5800.
    2- rare accuracy problem in bnfinit
       P=x^8-787856*x^6+232721637848*x^4-30546112988506688*x^2+1503204734505922286224;
       setrand(1974190693); bnfinit(P) --> non invertible matrix in gauss
    3- inconsistent return type in nffactormod [#460]
    4- the following TODO item
        bnfinit may give wrong answers because we cheat on the value of
        Bach's bound, using B := 0.3 log^2 D by default, where 0.3 should
        really be 12 (under GRH). If the prime ideals of norm <= B do not
        generate the classgroup, we may not detect it, and compute junk. Ex:
        * setrand(3); bnfinit(y^4 + 1190*y^2 + 1416100).cyc
          --> [8,2,2,2]. The correct structure is [8,4,2].
        * setrand(1414185642); bnfinit(y^4 + 635*y^2 + 403225).reg
          [twice the correct value]
        * setrand(867341586); bnfinit(y^4-y^3+6122*y^2+6121*y+37466641).gen[2]
          [is principal]. Group structure and regulator are correct!
       Retune check_bach()
IZ  5- remove bogus test for "external help" (= ??)
IZ  6- [OS/2]: stack check [prevent oo recursion] present but not enabled
IZ  7- [OS/2]: bogus [BUG] in 'program' bench (install pb not detected)
    8- gammah(1+O(3^5)) --> incorrect type in ggamd.
    9- invalid read in copy_leaf [ SEGV in some libc ]
BA 10- ellheight short help was accidentally truncated.
   11- substpol(1+O(x^(2*n)),x^2,x) --> 1+O(x) instead of 1+O(x^n) [#470]
   12- [OS X] only use -no-cpp-precomp with Apple cc
   13- divrem(x,x,y) --> [1/y*x, 0]
   14- (1+x)/(1-x)/(1+x)^2 not simplified [#472]
   15- typo in qflll: in rare cases (exact input+floating point computation+
       precision increase in last-but-1 step), the returned base change is not
       properly updated in last iteration --> basis not LLL-reduced
   16- simplification missed in div_scal_rfrac() [ #473 ]
   17- ispower(x^k, k) would answer 0 for some x and k in {3,5,7} [#476]
   18- content(t_MAT with exactly 1 col) gave a wrong result
   19- random(N) was not uniformly distributed in [0,N-1] (use a reject
       strategy instead of moding out) [#210]
   20- rare bug in red_montgomery (returning 0 with + sign, an incorrect object)
       [ polrootspadic(x^11+x,11,10) --> corrupts gen_0 ]
   21- qfbsolve(Qfb(1,2,10),5) --> [0,0; 0,0] instead of 0 [#479]
   22- ispower(0, n, &z) would not set z
   23- wrong result in conversion t_QUAD -> t_PADIC whenever disc  = 1 (4)
JJ 24- gaddgsz macro was wrong [#481]
   25- gener_Fl(p^k) can't handle k > 1, use gener_Zl instead [#480]
SC 26- [GMP] mp_set_memory_functions was called with an incompatible realloc 
       function. [#484] 
   27- raising a t_QFI or t_QFR to the power n would return a reduced form (OK)
       except when n = 1. Make it systematic.
   28- in rare cases (return 0, native kernel) int_normalize was not suitable
       for gerepileupto
   29- idealnorm(nf, t_POL) didn't work
AM 30- [TeXmacs] typo in texmacs_output: x --> <bluex> [#491]
   31- accuracy errors in bnfinit: setrand(3); bnfinit(x^2+999999999999971)
       [ use a failsafe version of gmod (modr_safe), and increase accuracy 
         if necessary ]
   32- possible corruption of gen_2 in mynegi() [ hnflll ]
   33- factor(4/x) --> [2, 2; x -1]  (content not removed)
BA 34- bnrstark prototype code was non-standard.
   35- rnfkummer(,,degree) often found too many fields [#482]
   36- loss of accuracy in p-adic ellinit: wrong digits and spurious errors:
       E.g i = 5; ellinit([1, -1, 1, -1, -14]*(1+O(17^i)))
   37- missing GC in forvec(,,2)
BA 38- Interrupting GP could lead to a freeze. [#488]
   39- possible stack corruption in charpoly(,1)
   40- Ser(x) raised an error [#499]

  Changed
    1- moved cgiv, gtofp to inline kernel
    2- reduce amount of memory needed by APRCL
    3- remove CPP from Configure tests (not needed)
    4- allow arbitrary sequences (not only expressions) in sum, prod, etc.
       sum(i = 1, 2, 1;2) --> 4  [ was: error ]
    5- checked that no 2-strong pseudoprime passes BSPW primality test up to 
       10^15 (use Galway's list, extending Pinch's 10^13)
    6- random() now uses Brent's XORGEN (replaces congruential linear generator)
       getrand() returns the FSR internal state array, used by setrand(). The
       latter no longer returns the input seed. (Initial patch by RR)
    7- for install(): parser code 'E' is now obsolete, use 'I'
    8- if issquare(x, &n) == 1, always set n to a square root of x
    9- if ispower(x, k, &n) == 1, always set n to a k-root of x
   10- issquare(t_QFI or t_QFR) now is an error. Use explicitly
       issquare(component(x,1)) if you relied(?) on the old behaviour
   11- [library] rename gener_Fp -> pgener_Fp, gener_Fl -> pgener_Fp
       [ contrary to 'gener', these assume that their argument is prime ]
   12- [library] rename cyclo -> polcyclo, subcyclo -> polsubcyclo,
       tchebi -> polchebyshev1, legendre -> pollegendre
   13- restrict the types allowed in gaffect and gaffsg to scalar types and
       vectors of such.
   14- vecextract(x, bitmask) much faster [ read bits, don't use shifts ]
   15- improve hyperu
   16- remove gp-specific signal handler. Use the one in libpari
   17- [library] pol_1 and pol_x are no longer global arrays but functions
   18- [GMP] was inefficient for small sizes (e.g. 1-word operands)
   19- optimized rectplothrawin & plot (remove gaffect, use gtodouble
       whenever possible). Coordinate computations should be faster and more
       accurate.

  Added
BA  1- function Flm_rank
BA  2- Add experimental --enable-tls Configure option and thread-local stack 
       support. Warning: using this option break the ABI.
    3- centerlift(t_PADIC)
    4- pgener_Zp, pgener_Zl
    5- dvdiu, dvdis, dvdiu, dvdsi, affgr
    6- cgetipos, cgetineg, togglesign
RM  7- polhermite, polchebyshev2
    8- allow rnf.zk and rnf.nf
    9- [toplevel benchmarks] bnfisintnorm, quadclassunit, rnfkummer
   10- ZX_factor, QX_factor
   11- allow gzip'ped elldata & galdata files
   12- allow t_VECSMALL in vecmin / vecmax
BA 13- add pari_stackcheck_init() function to control deep recursion detection
   14- Configure --tune flag

  Removed
    1- Odos/Makefile (no longer functional, obsolete)
    2- old CodeWarrior-specific hack (malloc)
    3- error code: intger2, affer3, overwriter
    4- useless static function gp_handle_SIGINT
    5- functions changevar() [ use substvec ] and reorder() [ use variable()
       to get the list of user variables ], global arrays pol_1[], pol_x[]
       ordvar[] and polvar[]

