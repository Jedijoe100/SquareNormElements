# $Id$
Bug numbers refer to the BTS at http://pari.math.u-bordeaux.fr/Bugs/

Done for version 2.4.3 (released ??/??/2008):

  Fixed
    1- \h m-n no longer worked
BA  2- some error messages displayed internal token names (e.g for '1)
    3- named colors in 'graphcolormap' were not portable across graphic drivers
    4- setunion(Set(),Set()) -> SEGV [#714]
DE  5- [Solaris] pari.desc won't compile [#715]
    6- 822.pm broke the formatting of inline program examples
    7- memory leaks in pari_close_opts [ freeep(), parser stacks, some
       defaults... ]. FIXME: calls to getpwuid introduce (small) leaks
    8- ZV_Z_mul might not reset clonebit.
    9- nfeltreducemodpr --> gerepile errors [#716]. Also SEGV for residue 
       degre > 1 (when p does not divide the index)
JD 10- write1("/dev/null", foo);1 --> extra newline
JD 11- is_dir_stat() gave incorrect results on special files (pipes,...)
JD 12- read() would block on pipes
   13- nfeltreducemodpr used different canonical representatives than all other
       modpr routines [#719]
   14- rnfconductor(,,1) did not recognize some abelian extensions [#718]
       (when the discriminant of a defining polynomial for the absolute number
       field could not be factored). Related to Changed-4.
   15- polgalois could confuse S_11 and F_110(11) if a certain polynomial
       discriminant could not be fully factored. Related to Changed-4.
   16- a = 0./x; a+a --> 0.
BA 17- [from 2.4.2] use of pointers in recursive expressions [#717]
BA 18- [from 2.4.2] trap() did not restore evaluator states [#722]
   19- simplifications missed when adding t_RFRAC [#721]
   20- gtofp(1 + 0*I) should not return 1. + 0.*I but 1.
   21- factor(500501^36): impossible assignment I-->S
   22- quadray(-7,6) [or other "impossible conductors"] --> oo loop [#725]
   23- acosh([Pol(1)]) -> gerepile error [#728] (same asin, asinh)
   24- rnf functions sometimes do not reduce their output when relative
       extension has degree 1 [#727]
   25- zetakinit(bnfinit(...)) -> gerepile error
   26- zeta(1-2^31 or 1-2^63) -> SEGV [#730]
BA 27- priority of << had become lower than priority of * (should be =)
   28- last digit of polylogs was wrong
BA 29- missing GC in the leftrightpow functions
   30- bnr=bnrinit(bnfinit(y^2-229,1),5,1); rnfkummer(bnr,,3) --> oo loop
   41- mathnf(a,1) could have negative entries if non-trivial kernel [#741]
   42- [Configure -pg] some variables not written to pari.cfg
   43- missing subfields in nfsubfields [#744]
   44- [readline] <F1> or <M-h> would fail on 'fun()'. Delete trailing
       garbage in help routine.
   45- modular matrix inversion routines used O(n^2) inversions instead of O(n)
   46- print1() + read() or extern() + error/warning ==> missing \n
   47- infinite loop in nffactor [#751]
   48- ellordinate couldn't handle t_FFELTs
   49- eint1(10,10) completely wrong
   50- ispower broken due to uninitialized variable
   51- compilation fails with yacc unable to handle parse.y [ add explicit
       rule in Makefile to prevent from generating a wrong one ]
   52- duplicate factors in nffactor (easy cases) [#761]
   53- ellisoncurve(e, P) didn't check that "point" P had the correct format
   54- znlog(...,znprimroot(p)) --> SEGV [#765]
   55- wrong signs in bnfisintnorm e.g. [bnfinit(x^3+5), 5] -> x [#767]
   56- x/(x+2) * Mod(1,2) -> Mod(1, 2)*x/(x + 2)  [ should be Mod(1,2) ]
   57- substpol(x/(y^3*x+1),y^2,1) -> x/(y^3*x + 1) [ should be x/(y*x+1) ]
   58- missing sanity checks in rnfbasistoalg()
   59- setrand(1); E=ellinit([0,0,0,1,T^4]*Mod(1,ffinit(2,7,T))) --> "weird
       base ring; can't divide"
   60- nffactor(nfinit(y),x*y)
       nffactor(nfinit(y),x^2*y+1)
       nffactor(nfinit(y),x^2*y)  --> errors or SEGV. [#769]
   61- hilbert(1,1,1) --> oo loop [#770]
   62- nffactor(y^2+1, x+1/2) --> x+1/2 [ not integral ]
   63- nffactor(y^2+1,x*y+1) --> x*y + 1 [ not normalized, missing POLMOD ]
   64- nffactor(y^2+1,x^2+2*y+1) --> x^2+2*y+1 [ missing POLMOD ]
   65- ellpow() with CM raised a "division by 0" instead of returning [0] [#777]
   66- ellpow(e,z,2^20*I) --> norm too large in CM.
   67- p=x^4-x^3+x^2-x+1; tnf = thueinit(p); thue(tnf,1) -> missing solutions
       (could occur whenever p has no real root) [#764]
   68- missing GC in numtoperm()
   69- harmless uninitialized memory read in mulrrz_i()
   70- sigma(..., 2) --> SEGV [ introduced in 2.4.1 ] [#783]
   71- tuning problems in bnfinit
       bnfinit(polredabs(quadhilbert(-2939))) --> oo loop
   72- minor inaccuracy in GMP kernel (affir)
   73- missing GC in gamma / lngamma
   74- obscure SEGV when setting 'log' in a file read from command-line
       as gp foo.gp [#789]
   75- check that moduli are compatible in Rg_to_Fp(t_INTMOD, t_INT)
   76- matsolve([1;2;3],[1,2,4]~) --> [1]~  (should raise an error)
   77- allow polredabs(x in Q[X])
BA 78- [galoisinit] Documentation of "weakly" supersolvable was incorrect.
   79- binomial(t_REAL or t_COMPLEX, k) was very slow for large k
   80- quadclassunit(-3 or -4) --> one extra (obsolete) component.
BA 81- the evaluator did not garbage collect huge expressions [#713]
BA 82- changing a function in use caused a crash [#784]
   83- vecsort() would not check the type of element in 1-dimensional vector
       [ e.g. vecsort([I] now raises an error ]
   84- RgX_val would raise a SEGV on t_POLs with exact *non-rational* 0
       leading coeff, e.g. Mod(0,2)*x
   85- SEGV (stack corruption) in idealval(K, rational number, pr) [#808]

  Changed
    1- [libpari] prototype of gpmalloc, gprealloc [ return void * ]
    2- contfrac(x, b): no longer allow (undocumented) type t_MAT for b
BA  3- builtin-in GP functions can now be used as closures.
    4- allow nffactor(t_POL, t_POL), nfroots(t_POL, t_POL) [ necessary when
       nf.disc could not be factored and addprimes() would have to be used ]
    5- removed undocumented interface FpM_mul(x,y,NULL), and analogously for
       FpV_dotproduct, FpV_dotsquare, FpM_FpC_mul
    6- [library] rename assmat -> matcompanion
    7- prototype of FpX_center [ add one argument ]
BA  8- [svn/CVS] number development snapshots according to repository version
    9- delete CVS.txt and replace it with README-subversion
   10- syntax errors are no longer trapped
   11- quadray no longer allows an (optional) 3rd argument
   12- 'format' was updated after each 'realprecision' change. Don't update
       if 'format' is Xm.-1 (show all significant digits).
   13- the algorithm used to round t_REAL for output
   14- the "minimum field width" component of the 'format' default is now
       ignored (was used only for integers in 'prettyprint' output mode and
       defaulted to 0 [no effect]). Use printf !
   15- %Z is no longer a valid conversion specification for PARI formats,
       since this is now handled as a length modifier. Use %Ps instead
       (P stands for PARI).
   16- remove the (ugly) prettyprint engine ('output' = 2), render as matbrute.
       printp / printp1 now act as print/print1
   17- pariprintf renamed to pari_printf, %Z conversion disappeared (use %Ps)
   18- rename pariputc -> pari_putc, pariputs -> pari_puts, pariflush ->
       pari_flush, gpmalloc -> pari_malloc, gprealloc -> pari_realloc,
       gpfree -> pari_free
   19- check for small prime divisors in ispower [ large speedup ]
   20- rename cmp_ZV -> ZV_cmp
   21- rename derivpol -> RgX_deriv
   22- the conversion style 'g' of the 'format' default now printfs in style
       'f' if the decimal exponent is < -4 ( was: if the binary exponent
       is < -32 ), in order to conform to standard printf specifications.
   23- [GMP kernel] enable GMP exact division
   24- matdetint: use less memory + faster finish
   25- change the default algorithm for mathnf(a) [ much faster ], flag 0 is
       no longer deprecated
   26- rename smith2 -> smithall, gsmith2 -> gsmithall
   27- rename torsell -> elltors and document it
   28- library/GP function galoisinit() now returns NULL/0 on failure
       (used to raise an exception)
   29- allow nfgaloisconj(t_POL, 1) [ cf C-4 ], never resort to nfgaloisconj(,2)
       [ slow, unreliable ] with default flag = 0
   30- [library]: factorpadic4 -> factorpadic, factorpadic2 now static
   31- [library]: gsub now implemented directly when typ(x) = typ(y)
BA 32- all LLL variants now use an implementation of NGuyen & Stehle's algorithm
   33- [library]: the "prec" parameter of floating point LLLs has disappeared
   34- Vecrev(x) now equivalent to extract(Vec(x), "-1..1") [was only for t_POL]
   35- allow t_COMPLEX as well as t_QUAD in ellpow
   36- [library] rename isfundamental -> Z_isfundamental
   37- we used to have Set(1) == Set("1") ( = ["1"] ). Now the latter returns
       ["\"1\""] (the Set whose element evaluate to the character string "1")
   38- plotinit: change the way default arguments are evaluated (omit, instead
       of interpreting 0 in a special way) 
   39- nfbasistoalg / nfalgtobasis no longer accept t_VEC/t_COL/t_MAT,
       use matbasistoalg / matalgtobasis, which now also accept t_VEC/t_COL
   40- rename library functions nfhermite -> nfhnf, nfhermitemod -> nfhnfmod
   41- uniformize factornf and nffactor outputs (+ speed them up for 
       non-squarefree inputs: compute valuations mod a suitable prime)
   42- treat Mat(t_LIST) as Mat(t_VEC)
   43- t_POL^0 always returned t_INT 1 [ try to return 1 in coefficient ring ] 
   44- polresultant(x,y,,0) now chooses the best algorithm by itself 
       [Ducos, modular, Sylvester], polresultant(x,y,,2) is now a synonym 
       for the default. The change also improves poldisc().
   45- [library] rename subres -> resultant, subresall -> resultant_all.
   46- regression tests in src/test/in/ no longer need to end with
       'print("Total time spent: ",gettime)'
   47- rename library functions discf -> nfdisc, nfdiscf0 -> nfdisc0
   48- arguments of stirling1 / stirling2 are now ulongs [ were longs ]
BA 49- user variables can now be aliased [#790].
   50- conjvec(POLMOD of INTMODs) now returns lifted conjugates (10 times
       faster)
   51- rename polvaluation -> RgX_valrem(x, pz) and no longer accept pz = NULL
       (use RgX_val). Same for ZX_valuation -> ZX_valrem [ & ZX_val ]
       rename poldeflate -> RgX_deflate_max
   52- rename matrixqz2 -> QM_ImZ_hnf, matrixqz3 -> QM_ImQ_hnf, matrixqz ->
       QM_minors_coprime
   53- bnfcertify can now handle Zimmert/Minkowski bounds > 2^31
   54- moved misc/dico.new to src/whatnow + integrate it in the
       description system [ new script desc/whatnow ]
   55- bittest(x, n) no longer accepts t_VEC arguments n
   56- rename library functions hil0->hilbert, hilii->hilbertii
       [ delete useless hil() ]
   57- split library function disable_dbg() -> dbg_block() / dbg_release()
   58- rename library functions srgcd -> RgX_gcd
   59- rename library functions ismonome -> RgX_is_monomial
   60- make the semantics of substpol more precise and less surprising:
       substpol((x^2+x+1)/(x^2+x-1),x^2,x^3) -> (x^3 + x + 1)/(x^3 + x - 1)
       [ was: (x^6 - x^3 - 2*x - 1)/(x^6 - 3*x^3 + 1)  ]
   61- deprecated flag '2' for bnfinit [ don't compute units ] is now ignored
       ==> bnfunit becomes totally useless.
   62- the last component in prime ideals "primedec" format is a number field
       element, but no longer necessarily in t_COL form
   63- rename library functions idealhermite -> idealhnf
   64- no longer allow ideals in *non-square* t_MAT form 
   65- idealmin now returns a number field element, instead of the associated
       "principal idele"
   66- rename library functions minideal -> idealmin and change prototype
   67- cleared up the confuѕion caused by PARI "ideles", which were remotely
       related to the mathematical notion, and covered two distinct uses. The
       first one (ideal + list of real places) is now called "divisor"; the
       second one (ideal + factorization matrix, which used to be a vector 
       of logarithms of complex embeddings) is now called "extended ideal".
   68- rename library functions element_mulmodpr -> nfmulmodpr,
       element_powmodpr -> nfpowmodpr, element_val -> nfval,
       element_divmodpr -> nfdivmodpr,
       element_mul -> nfmul, element_pow -> nfpow, element_div -> nfdiv,
       element_reduce -> nfreduce.
   69- Allow Scalar + t_COL: x + y returns [ y[1]+x, y[2],... ]. Consistent
       with RgC_Rg_add and RgV_isscalar, and allows linear algebra over number
       fields with less rigid data types (can mix freely t_COL, t_INT
       and t_FRAC, instead of converting everything to t_COL).
   70- Rename library functions Z_factor_limit -> Z_factor_until,
       and auxdecomp -> Z_factor_limit
   71- Rename library functions mu -> moebius, gmu -> gmoebius,
       phi -> eulerphi, gphi -> geulerphi, phiu -> eulerphiu, 
       gener -> znprimroot, ggener -> znprimroot0, racine -> sqrtint,
       regula -> quadregulator, fundunit -> quadunit
   72- Rename library functions BSW_* -> BPSW_*
   73- Functions quadunit(), quadregulator(), and factor() no longer apply
       componentwise to vector / matrix arguments. Use apply()
   74- [libpari] removed obsolete 'prec' argument from prototypes of idealmul0,
       idealmulred, idealpow0, idealpowred, ideallllred, algdep, algdep0,
       lindep, lindep0
   75- Rename library functions ideal_two_elt* -> idealtwoelt*,
       factorback0 -> factorback2, subfields0 -> nfsubfields,
       zideallog -> ideallog, isunit -> bnfisunit
   76- factorback() no longer accepts an optional 3rd argument (nf). Use
       idealfactorback(). See also nffactorback().
   77- Extend polhensellift to work over unramified extensions of Q_p
       [ was Q_p only ]
   78- [libpari] changed prototypes of bnrdisc, bnrconductor, bnrisconductor
   79- slightly change the matrices used in idealmin (round them): the elements
       returned are a little different.
   80- no longer export private library function incgam2. Remove it also
       under GP when compatible = 3. Like incgam1 (suppressed), 1.39.15 doc
       stated it was provided "for debugging only".

  Added
    1- library function pari_calloc, cgetalloc
    2- [libpari] public generic hashtables
    3- library function FpM_FpC_mul_FpX
    4- library function shallowextract
    5- library functions ZC_ZV_mul, ZM_copy, ZM_neg, ZM_add, ZM_mul, ZM_pow
       ZM_sub, ZM_ZC_mul, ZV_copy, ZV_neg, ZV_neg_inplace ZV_togglesign
       ZXV_Z_mul, ZM_Z_mul, ZV_Z_mul, ZV_isscalar
BA  6- handle numerical derivation as an operation on closure.
    7- Fp_center, FpM_center, FpV_center
RB  8- GP functions printf, Strprintf
BA  9- library function ZV_indexsort
   10- library functions pari_printf, pari_fprintf, pari_sprintf, pari_vfprintf,
       pari_vprintf, pari_vsprintf
BA 11- docpdf and install-doc-pdf targets (toplevel Makefile)
JD 12- add an optional argument to quit()
   13- library function FqX_roots(), FpX_factorff()
   14- files src/basemath/ RgV.c, FpV.c, ZX.c, ZV.c, concat.c, lll.c
   15- new benches: 'galoisinit', 'ispower', 'nffactor', 'subfields',
       'resultant', 'partition', 'aurifeuille'
   16- library functions Flc_Fl_div, Flc_Fl_div_inplace, Flc_Fl_mul,
   Flc_Fl_mul_inplace, Flm_Fl_mul, Flm_Fl_mul_inplace, Flm_copy, Flm_mul,
   Flm_inage,
   Flv_Fl_mul_inplace, Flv_add, Flv_add_inplace, Flv_copy, Flv_dotproduct,
   Flv_sub, Flv_sub_inplace, Fp_mulu, FpV_inv, FpXQ_inv, FqV_inv, RgM_check_ZM,
   RgM_det_trianguar, RgM_isdiagonal, RgV_check_ZV, RgXQX_pseudorem,
   RgX_check_ZX, RgX_check_ZXY, RgX_pseudodivrem, RgX_pseudorem, RgX_reverse,
   ZC_hnfrem, ZC_hnfremdiv, ZM_det_triangular, ZM_detmult, ZM_equal, ZM_hnf,
   ZM_hnfall, ZM_hnfcenter, ZM_hnflll, ZM_hnfmod, ZM_hnfmodid, ZM_hnfmodidpart,
   ZM_hnfrem, ZM_hnfremdiv, ZM_hnfperm, ZM_snf, ZM_snfall, ZM_snfall_i,
   ZM_snfclean, ZMrow_ZC_mul, ZV_ZM_mul, ZV_cmp0, ZV_content, ZV_equal,
   ZV_lincomb, ZXY_max_lg, ZX_copy, ZX_equal, ZX_max_lg, row_Flm, row_zm,
   togglesign_safe, zero_Flm, zero_Flv, zero_zm, zero_zv, zm_copy, zv_cmp0,
   zv_copy, zv_equal, bitvec_test_set, ZM_is_identity, RgX_get_0, RgX_get_1,
   resultant, resultant_all, QX_disc, QX_resultant, Z_ZX_sub, ZX_Z_sub,
   zx_renormalize, zv_content, ZM_lll, ZM_lll_norms, lllfp, lllintpartial,
   lllintpartial_inplace, reducemodlll, reducemodinvertible, closemodinvertible,
   RgC_RgM_mul, RgC_RgV_mul, RgM_RgC_mul, RgM_RgV_mul, RgM_mul, RgM_sqr,
   RgV_RgM_mul, RgV_RgC_mul, RgV_add, RgV_neg, RgV_sub, ZM_max_lg, RgC_Rg_add
   RgV_sum, RgV_sumpart, RgV_sumpart2
   17- universal constant gen_m2, for symmetry
   18- GP function version() [ current version number ]
   19- library functions scalar_ZX, scalar_ZX_shallow, FpXY_eval, FpXY_evalx,
   FpXY_evaly, Fl_order, init_primepointer, Flx_nbfact_by_degree
   20- library function galoisinit0, get_nfpol, get_bnfpol, 
   nf_get_r1, nf_get_r2, nf_get_roots, nf_get_sign, nf_get_prec (was nfgetprec)
   numberofconjugates, mkfraccopy, mkquad, mkvecsmall4, shallowconcat1, concat1,
   ZV_prod, ZV_pval, ZV_pvalrem
   zv_prod
   RgX_neg, RgX_add, RgX_sub, RgX_Rg_add, RgX_Rg_sub, Rg_RgX_sub,
   RgX_equal, RgX_equal_var, RgX_translate, RgX_to_nfX, RgX_type,
   RgX_type_decode, RgX_type_is_composite, RgX_Rg_divexact,
   RgXQ_norm, RgXQ_pow,
   RgV_neg, RgV_add, RgV_sub, RgV_Rg_mul,
   RgC_neg, RgC_add, RgC_sub, RgC_Rg_div, RgC_Rg_mul,
   RgM_neg, RgM_add, RgM_sub, RgM_Rg_div, RgM_Rg_mul, RgM_diagonal,
   RgM_diagonal_shallow, RgM_inv, RgM_solve,
   FF_sub, ZC_lincomb1_inplace, ZC_z_mul,
   Z_isanypower,
   RgXQX_translate, RgXQV_to_mod, RgXQXV_to_mod
   21- library function nf_to_scalar_or_basis, nf_to_scalar_or_alg
   22- library function roundr_safe
BA 23- [ellap] Port of SEA algorithm from the ellsea GP package
BA 24- new alarm GP function and alarmer error code
   25- library functions chinese_coprime_Z, Z_chinese, Z_chinese_all,
       Z_chinese_coprime, Z_chinese_post, Z_chinese_pre, Z_incremental_CRT,
       Z_init_CRT, ZM_incremental_CRT, ZM_init_CRT, ZX_incremental_CRT,
       ZX_init_CRT, RgX_disc, quad_disc, qfb_disc, deg1pol, deg1pol_shallow
RM 26- partitions()
   27- library functions nf_to_Fq_init, nf_to_Fq, Fq_to_nf, zkmodprinit,
       zk_to_Fq_init, zk_to_Fq, nfM_to_FqM, FqM_to_nfM, nfX_to_FqX, FqX_to_nfX
       ZX_squff, ZX_gcd_all, nfgcd, nfgcd_all, RgXQX_pseudodivrem,
       ZX_to_monic, ZX_primitive_to_monic
       Flx_roots_naive, zk_multable, zk_scalar_or_multable
BA 28- library functions checkgroup, galois_group, cyclicgroup, dicyclicgroup,
       abelian_group, group_domain, group_elts, group_order, group_isabelian,
       group_abelianHNF, group_abelianSNF, group_isA4S4, group_leftcoset,
       group_rightcoset, group_perm_normalize, group_quotient, quotient_perm,
       quotient_group, quotient_subgroup_lift, group_subgroups,
       groupelts_abelian_group, groupelts_center, group_export, group_ident
   28- library functions identity_perm, cyclic_perm, perm_mul, perm_commute,
       perm_inv, perm_pow, cyc_pow_perm, cyc_pow, perm_cycles, perm_order,
       vecperm_orbits
   29- New chapter in Libpari Guide: usersch6.tex
   30- library functions mulreal & RgM_mulreal
   31- library functions Flx_Fl_mul_to_monic, FlxqX_Flxq_mul_to_monic,
       FpX_Fp_mul_to_monic, FqX_Fq_mul_to_monic
   32- library function dbg_pari_heap
   33- library function  nfordmax, nfarchstar (was zarchstar), nfsign,
       nfsign_arch, nfsign_units, nfsign_from_logarch, Buchquad, Buchall,
       Idealstar, idealaddtoone_i, idealcoprimefact, hnfmerge_get_1,
       nfinvmodideal, nfpowmodideal, idealsqr
   34- function bnfcompress() [ to create a "small bnf" from a true
       bnf, to be recoved using bnfinit ]. More consistent than old
       bnfnit(,3) / bnfmake.
   35- library functions mul_content, mul_denom
   36- a concept of "extended ideal" [I, t], where t is an algebraic number
       (possibly in factored form). The pair represents the ideal I x (t)
       In applications the norm of I stays bounded for a given base field,
       and t keeps track of the "principal part" of the ideal (usually in
       factored form to avoid coefficient explosion).
   37- nfadd, multable, tablemul, tablemul_ei, tablemul_ei_ej,
       tablemulvec, tablesqr, ei_multable.
   38- library functions BPSW_psp & BPSW_isprime
   39- public interface to forsubgroup: traversesubgroups()
   40- library function bnfisprincipal0 (with new public flags, see nf_GENMAT)
   41- GP functions nffactorback / idealfactorback
   42- files src/modules/QX_factor.c, src/modules/Hensel.c, 
       src/modules/DedekZeta.c
   43- library functions bnrisconductor0, bnrdisc0, bnrconductor0,
       bnrsurjection, ABC_to_bnr, idealred, idealred0 (was ideallllred),
       idealred_elt, idealred_elt0
   44- library functions trueeta, exp_Ir

  Removed
    1- obsolete library functions extract and matextract
    2- obsolete optional argument to quadhilbert(D < 0)
    3- unused undocumented library functions os_open/os_read/os_close
    4- obsolete README.DOS and README.WIN
    5- cant_deflate, elliper1, lllger3 error codes
    6- obsolete library function bruteall
    7- useless undocumented library function gkrogs (use krois)
    8- obsolete library functions roots2 and rootsold are no longer public
    9- useless library function isnfscalar
   10- obsolete undocumented library function factpol(), lift_to_pol()
   11- library function combine_factors() is no longer public
   12- obsolete undocumented library function rnfdet0, rnfdet2
   13- obsolete library function discsr(). Use RgX_disc (or quad_disc, qfb_disc)
   14- obsolete library function element_powmodidele() [use element_powmodideal
       + set_sign_mod_idele], ideleaddone, reducemodmatrix, nfreducemodidele,
       nfreducemodideal, nfreducemodideal_i, elementinv_modpr
   15- useless macros gaddgsz, gaddsgz, gdiventgsz, gdiventsgz, gdivgsz,
       gdivsgz, gmaxgsz, gmaxsgz, gmingsz, gminsgz, gmodgsz, gmodsgz, gmulgsz,
       gmulsgz, gsubgsz, gsubsgz, gachz, gacosz, gashz, gasinz, gatanz, gathz,
       gchz, gcosz, gcotanz, gexpz, ggamdz, ggammaz, glngammaz, glogz, gpsiz,
       gshz, gsinz, gsqrtz, gtanz, gthz, gzetaz, gmaxz, gminz, TRgopgz,
       mpfloorz, mptruncz, mpdvmdz
   16- obsolete library function gmillerrabin, gpolcomp, caradj0
   17- obsolete library functions allbase, base, base2, factoredbase, smallbase,
       discf2, factoreddiscf, smalldiscf. Use nfbasis0 / nfdisc0 / nfmaxord
   18- obsolete library function pari_rand31  [ use pari_rand ]
   19- obsolete undocumented library function bruterr
   20- obsolete GP functions printp, printp1
   21- obsolete library function smallbuchinit
   22- obsolete GP functions bnfclassunit, bnfreg, bnfclgp, bnfunit.
       Use bnfinit.
   23- obsolete GP functions bnrclass. Use bnrinit or bnrclassno.
   24- awkward flag '3' for bnfinit. Use bnfcompress().
   25- badly named bnfmake. Use bnfinit(sbnf).
   26- useless component v[6] in "small bnfs" (was 'different', is 0)
   27- obsolete library functions buchray, buchrayinit, buchrayinitgen:
       use Buchray.
   28- obsolete GP function idealprincipal. Use number field elements "as is"
   29- obsolete GP function ideleprincipal. No routine remains that would
       use the auxiliary "archimedean information"
   30- obsolete library function smallfact [ use boundfact or Z_factor_limit ]
   31- obsolete library function gracine [ use sqrtint ]
   32- obsolete library function ispsp, gispsp. Use ispseudoprime or BPSW_psp.
   33- obsolete library function gregula, gfundunit, gboundfact.
       Use quadregulator, quadunit, boundfact
   34- obsolete library functions ideallistunit, ideallistunitgen,
       ideallistzstar, ideallistzstargen. Use ideallist0.
   35- obsolete library function algdep2. Use algdep0 (same arguments).
   36- obsolete library function Mod0. Use gmodulo.
   37- obsolete undocumented library function poldvd. Use 
       RgX_divrem(x,y, ONLY_DIVIDES)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Done for version 2.4.2 (released 22/12/2007):

  Fixed
    1- divrs(0., negative integer) had the wrong exponent
    2- vecsort(,,4) was broken in 2.4.1
    3- allocatemem(z) didn't check that z >= 0 [#556]
    4- remove hack in internal function 'readbin' that used the clone bit as
    a special marker hence returned an invalid object, which could be
    propagated to higher level public functions.
BA  5- sqrtn(Mod(a,p),..) and factorff() were broken in 2.4.1
BA  6- bitnegimply(1,2^65) returned a wrong result [#560]
    7- nfeltreduce(nf,t_POLMOD,id) didn't work [#558]
    8- [library] missing function intfourierexp()
    9- segv in polrootspadic / repeated roots in FpX_root (only in deg 2) [#562]
   10- log(2+O(4^4)) --> oo loop
   11- log(exp(1e-100)) -> 1.000000000149525401279188592 E-100
       [ for some accuracies, log & exp inacurate near 1 and 0 resp. ]
   12- numbpart inaccurate (and slow). E.g numbpart(52602) off by 1 [#557].
BA 13- &, |, && and || were right-associative instead of left-associative
   14- remove type assumptions in mulcxI, mulcxmI: unsafe [#516]]
   15- too much memory allocated to print real numbers
   16- (y/x)/(x^0/y) not correctly simplified
   17- \s reported a misleading number of available user variables
   18- 1/(quadgen(-4)*x)+0. -> exponent overflow [#591]
   19- sumpos(x=1,1/x^2,1) had the wrong sign [#587]
   20- matrixqz(x,0) would not work if first two determinants were 0
       + might lose pointers in gerepile
   21- sumpos(x=1,0) -> oo loop [#585]
   22- qfminim([[;]],,,2) --> SEGV [#598]
   23- intformal(1) --> incorrect object
   24- intformal(y,x) --> y*y
   25- matadjoint(0) --> gerepile error
   26- prodinf(x=0,0), prodinf(x=0,-1,1) --> oo loop
   27- agm(-1, 1+1e-55) --> oo loop, agm(-1,1) --> wrong result
LGr28- killing hi-res graphic window created zombie process (missing wait())
   29- missing type check in eint1(x,n)
   30- ploth(...) + Ctrl-C --> hi-res graphic window killed [use pari_daemon()]
   31- quadgen([]) --> incorrect object [#606]
   32- hyperu(0,1,1) --> oo loop [#608]
   33- fix headers so that ulong is always defined
   34- read("a b.gz")   \\ filename contains a space
       gzip: ./a.gz: No such file or directory
   35- logagmcx inaccurate [ used for log(t_COMPLEX), large precision ]
   36- RgX_divrem: prevent "impossible" situations for weird base rings
       1/ Mod((y-1)*x-1, Mod(2,6)*x^3-Mod(1,2)*x^2-1) --> SEGV
   37- gclone didn't work on t_INTs with lg > lgefint
   38- GC error in add_rfrac() [#612]
   39- missing type check in subgrouplist [#616]
   40- inconsistent type checking in nfeltdivmodpr [#617]
   41- nfdisc(x^32+24888960*x^30+227077545803904*x^28+887225199431341086720*x^26+1145458263702669503266741248*x^24-459489127319699704284694158213120*x^22+73430099675988831740428200872826863616*x^20-6599321778961370851005469933592282336329728*x^18+369563540304176984501448638025309170375722401792*x^16-13214618078037183940422584396181416089308059714715648*x^14+291247424536170563676138246427605494527806096141868597248*x^12-3407227562250271661213064368167141844394234574629997803208704*x^10+8699659624155196549893192408316795253695601521375537680749690880*x^8+153390110447793800411208197070089975539253907830958400507847198638080*x^6-34704742472413552993642506624568826441560550586777137133227202205188096*x^4+43389826962123095743039577910848855441856968086933919852164410699581227008*x^2+336462877895453750216450425189196151877685043455706101021513167474262016, 1)
       --> "not a prime" error (help Round4 to recover when using non-primes,
       instead of raising immediate errors) [#624]
   42- vecextract: C14 in 2.4.0 didn't work for large masks [#623]
   43- clean up version handling: move version setting code to config/version
       and always set PARIVERSION from CHANGES if 'CVS' [ used to require
       a 'Configure' ]
   44- zeta(0e1) --> SEGV [#627], exp(0e1*I) --> SEGV [#630]
   45- exp(2^200*I) --> catastrophic cancellation [cos/sin were OK] [#631]
DE 46- on NFS filesystems, make install would rebuild all [#503]
   47- default(compatible,3); default(compatible,1) --> case no longer taken
       into account [#629]
   48- missing GC in 'sigma'
   49- eta(x): valuation would overflow if seriesprecision is large
   50- typo in src/kernel/none/mp.c:convi --> inefficiency
   51- concat(v) used too much memory (quadratic in #v, make it linear) [#634]
BA 52- gp -q -f < eval('y) --> SEGV
   53- "significant pointers lost" for objects involving 0 t_SERs [#635]
   54- for trivial x, isanypower(x,&p) would not set p
MSo55- [Configure] don't rely on $CC exit status, check whether a non-0 size
       executable is produced [ problems with tcc ]
BA 56- wrong Prototype for subgrouplist [ extra 'p' ]
   57- hole in 'secure' mode: don't allow changing psfile / logfile [#645]
   58- nf.codiff was only correct up to multiplication by some rational number
       [cf #510 & 2.4.1-F7]
   59- cgiv failed to delete the last object on stack [ if recursive ]
LGr60- first default(parisize,*) would segfault [due to C-1, #569]
   61- pariputs("") --> invalid read of size 1 [ valgrind ]
   62- ell.omega, ell.eta, pr.gen could lead to gerepile error [#641]
   63- y=[x];eval('y) --> error [#652]
   64- incorrect use of gerepileupto in inittestlift [ galoisconj ]
   65- extra multiplication in the innermost loop of Cholesky decomposition
       (qfgaussred, etc).
   66- made FpX_add, FpX_sub, Fq_add, Fq_sub stack-clean. FpX_neg, Fq_neg
   returned an incorrect result if input was not reduced mod p
   67- setrand(4);polgalois(x^8-264*x^6+25410*x^4-1054152*x^2+15856203)
       --> wrong result [#660]
   68- build fails with "env: parameter list too long" [#661]
   69- factorff did not accept inputs with t_FFELT coeffs
   70- could use PARI stack while reading gprc [ before pari_init ]
   71- Mod(Mod(1,v),v) --> invalid object.
   72- a = Mod(y, v); y = Mod(1,v); eval(a) --> invalid object
   73- for some complicated t_RFRAC z: z' --> impossible assignment I-->S
   74- typo in bnfisintnorm(): missed some solutions  [ couldn't find a unit
       of norm -1 even though one exists ]
   75- ffprimroot(ffgen( t_POL of degree 1)) --> oo loop
   76- wrong result in theta(q, z) if sin(nz) was small for some small n [#667]
   77- 1/Mod(0,2) --> impossible inverse modulo: Mod(2, 2)
   78- alias(a,b), then ?a --> 'a is aliased to a'
   79- -Mod(0,2) --> Mod(2,2)
MA 80- [Linux-PPC] missing -fPIC in DLCFLAGS
   81- possible oo loop in _isprincipal [ precision was supposed to increase,
       but could in fact remain the same ]
   82- quadregulator(y) -> SEGV [#674]
   83- acos(x^0) -> division by 0 [ instead of O(x^8), at \ps 16 ]
       Analogously, acosh(x^0), asin(x^0), asinh(I+O(x)) --> division by 0
   84- dilog(-1) [ more generally polylog of < 0 t_REALs ] should have
       0 imaginary part
   85- problems with  [ build/install ] directory names containing spaces
   86- avoid catastrophic cancellation in 3M [ Karatsuba ] formula for
       t_COMPLEX * t_COMPLEX
   87- ix86, x86_64: missing earlyclobber constraint for addllx, subllx, divll
   88- ploth(,4) --> huge memory use for large plots
   89- stirling(0,0,2) --> 0  [ should be 1, #690 ]
   90- deriv(x/(x+1),y) --> invalid t_RFRAC with exact 0 numerator [#687]
   91- issquare(t_POL) assumed characteristic 0 [#549]
   92- sqrt(Mod(4,5) + x) --> error [ e.g. stack overflow ]
   93- hyperu(0*I,1,1) --> forbidden assignment t_COMPLEX --> t_REAL.
BA 94- fix compilation problem with g++-4.2 and GMP.
   95- ??factor_proven, ??factor_add_primes did not work
   96- typo in znprimroot: wrong result for large moduli
       znprimroot(5*2^127+1) --> 2 [#696]
   97- ffgen(x*Mod(1,2)) --> x [ should be 0 ]
   98- ffprimroot(ffgen((x+1)*Mod(1,2))) --> oo loop
   99- nffactor(nfinit(y),x^2+Mod(1,y)) --> SEGV [#699]
  100- "precision error in minim0" on qfminim(G, norml2(M[,1]), 100)
       from tutorial
  101- nffactor(nfinit(y^2+1),(2*x+1)*x*(x+1)) --> SEGV [#702]
  102- isprime((6^2176+1)/(6^128+1)) --> length (lg) overflow [#697]
       [ analogous problems for any large integer ]
  103- various problems related to allocatemem() [ + document quirks ]
       Remove the br_ALOCATEMEM construct and end allocatemem0() by a longjmp
  104- missing GC in det_simple_gauss() [ matdet for inexact inputs ]
  105- rare stack corruption in add_rfrac [#700]
  106- add missing GC in gsubst
  107- polred([pol, b]) computed unnecessary but possibly expensive
       invariants of pol [ e.g. disc, index ]
  108- compilation failed on AIX [ YYSIZE_T, pow ]
  109- ? Mod(1,2)*x + Mod(1,2)*y
       %1 = Mod(1, 2)*x + (Mod(1, 2)*y) \\ extra parentheses in constant term
       ? % + 0*z
       %2 = Mod(1, 2)*x + Mod(1, 2)*y
  110- factornf(x^5+(-a+2)*x^4-a*x^3+(3*a-6)*x^2+(5*a-10)*x+(2*a-5), a^2-5) 
       --> SEGV  [ not squarefree -> denominators creeping in ] [#708]
  111- problems with isexactzero and t_INTMODs. Mod(0,2)*x*1. -> 0,
       Pol(Mod(0,2))+2 -> 2, (2+0*I)+I*Mod(0,4)->Mod(2,4), Mod(0,2)/x -> 0
       Use isrationalzero instead.
  112- substvec(x^2, [x^2], [y]) --> y^2  [ should be an error ]
  113- typo in FpM_gauss_pivot: FpM_rank, FpM_image, FpM_suppl, FpM_indexrank
       much slower than they should be. Analogous problem in FqM_gauss_pivot.
BA114- missing GP2C descriptions for Pol and Polrev.
BA115- zero FFELTs were not considered as exact zeros [#710]
  116- rare SEGV in gp when recovering from error (dereferencing 
       global_err_data equal to BREAK_LOOP)
  117- vecsort(t_LIST) returned a t_VEC
  118- gp "huge file" + stack overflow --> stack overflow in next 
       interactive command (+ minor memoryleak) [#712]

  Changed
BA  1- The combined GP parser/evaluator has been replaced by a bytecode
       compiler and a bytecode evaluator
BA  2- install(): parser code 'E' and 'I' now refer to closures, not strings:
       'I': closure whose value is ignored, like in for() loop
       'E': closure whose value is used, like in sum() loop
    3- Fl_pow renamed to Fl_powu [ exponent may not be negative ]
    4- split usersch3.tex moving function documentation to src/functions/*
    5- simplify table of contents for users.dvi
    6- rename Flx_rand -> random_Flx, FpX_rand -> random_FpX
BA  7- use factor_pn_1 to compute various orders in FF.c
    8- file usersch3.tex is now generated from functions/*
    9- rewrote logr_abs [ inaccurate + slow for x = 2^k * (1 - epsilon) ]
   10- rewrote exp1r_abs [ inaccurate + slow ]  and mpexp_basecase [ reduce
       input mod log(2) ]
   11- rewrote mpsc1 [ slow ] -> faster sin and cos
   12- [library] rename pointch ->  ellchangepoint, coordch -> ellchangecurve
   13- prototype of constpi, consteuler.
   14- use a little less memory to compute pi, euler, log(2)
   15- qfminim(x,b,m,flag) made 'm' parameter optionnal also when flag=0
   16- made second argument to matrixqz optional, allow non-prime values
   17- matpascal(n < -1), mathilbert(n < 0) now raise an error
   18- add optional extra argument to ffprimroot, fforder, fflog
   19- allow znlog(x,g) where g a t_PADIC or an t_INTMOD modulo any N
       that znprimroot(N) would accept
   20- log(x t_PADIC): check whether x = 1 (mod p) before replacing x <- x^(p-1)
   21- znprimroot(p^k): use isanypower() instead of factor().
       E.g. znprimroot(nextprime(10^20)^1000): 8mn --> 12ms
       znprimroot(N) no longer checks reliably whether (Z/N)^* is cyclic.
       Result undefined if it is not.
   22- padic sqrt much faster [ small and large accuracies ]
   23- let primes() indicate a value of primelimit if unable to answer [#625]
   24- remove variable names from ?0
   25- exp(0e10) returned 1.000, made it 0exxx [ no significant digit ]
MSo26- define polchebyshev(n, 1 or 2), pollegendre(n) for n < 0
   27- znorder faster for non-prime modulus [ try it for Mod(2,5^10*7^10) ]
       (compute lcm of local p-adic orders)
   28- changed icopyifstack / copyifstack macros so that their arguments
       are GENs, not GENs typecast to long.
   29- add -funroll-loops to gcc flags when compiling arithmetic kernel
   30- improve ellap (Shanks) by computing #E(F_p) mod 2 [ idea stolen from
       Pierrick Gaudry ]
   31- nfreducemodpr was exceedingly slow for large t_POL inputs, e.g.
        w=x^48 + 158*x^46 + 4*x^45 + 12103*x^44 + 448*x^43 + 597874*x^42 + 23928*x^41 + 21373779*x^40 + 802424*x^39 + 588314524*x^38 + 18516794*x^37 + 12951694530*x^36 + 294992428*x^35 + 233870773964*x^34 + 2752210590*x^33 + 3524535272389*x^32 - 5797649292*x^31 + 44873186922754*x^30 - 798816466566*x^29 + 486736157075707*x^28 - 18082470992066*x^27 + 4523171646555185*x^26 - 271968456240780*x^25 + 36127625049532658*x^24 - 3144283847234232*x^23 + 248308835345289047*x^22 - 29271322082172250*x^21 + 1467438460133718165*x^20 - 223406933340907742*x^19 + 7435650911902583447*x^18 - 1405525828628464338*x^17 + 32139937168429173010*x^16 - 7272631544138987758*x^15 + 117563850386577478340*x^14 - 30686320483051428956*x^13 + 359649878031434743177*x^12 - 103986861631984042496*x^11 + 904392935429691313557*x^10 - 276283466933590000414*x^9 + 1822091999374665372405*x^8 - 554259164403897051340*x^7 + 2827767569115449802250*x^6 - 788757355446858093774*x^5 + 3170224521565069297504*x^4 - 708295322502763110380*x^3 + 2280480720610858280676*x^2 - 300602103002034938488*x + 788466592242441477569;
        nf=nfinit([w, nfbasis(w,1)]);
        modpr=nfmodprinit(nf, idealprimedec(nf,5)[1]);
        L = nfgaloisconj(w); vector(#L,i, nfeltreducemodpr(nf,L[i],modpr));
      (in this example, the last reduction is down from ~ 1minute to ~ 2s)
   32- make sure nfmodprininit chooses a monic T to represent
      Fq ~ Fp[X]/(T)  [#646]
   33- remove obsolete undocumented functions outerr, outbeauterr, outsor,
    outtex. Rename voir -> dbgGEN. Functions brute, outbrute, matbrute,
    outmat, sor, outbeaut are obsoleted and no longer documented.
   34- rename errfile -> pari_errfile, infile -> pari_infile, logfile ->
    pari_logfile
   35- extra test infrastructure [ drop file in src/test/in and possibly
    src/test/[32|64], then run Configure, no need to edit config/get_tests ]
   36- inline gerepileupto/gerepileuptoleaf + improve gerepileupto
   37- [libpari] cleanup of user / temp variable handling. manage_var
   obsoleted (kept for backward compatibility, to be removed), see Section 5.9
   for new equivalents. Fixes #633, #650
   38- fix t_LIST as components: v = [List()]; listput(v[1],) didn't work [#468]
   39- listcreate() and listkill() are obsolete, don't use them. L = List()
    should be enough in all cases. All lists now grow as needed, without
    requiring an awkward maximal length (from listcreate).
   40- rename sqred -> qfgaussred, signat -> qfsign,
    sqred1 -> qfgaussred_positive
   41- rename gaddmat -> RgM_Rg_add and swap arguments. Add RgM_Rg_add_shallow
   42- document library functions zv_neg, zm_transpose, fix typo in
    documentation for RgX_neg
   43- document library functions gmaxgs, gmaxsg, gmings, gminsg.
   44- document library function gfloor2n
   45- document library function zx_shift
   46- cleaned up splines handling [ ploth(,,,256) ] : remove quark_gen & QUARK
BA 47- implicitly local variables are lexically-scoped
BA 48- local and my can now appear anywhere in a program.
   49- [library] rename apell -> ellap
   50- Removed the OK_ULONG macro and renamed u_OK_ULONG -> SMALL_ULONG
   51- Rename BIGINT -> NO_VARIABLE [used by gvar()], VERYBIGINT -> LONG_MAX,
       MAXULONG -> LONG_UMAX. Remove BYTES_IN_LONG, TWOPOTBYTES_IN_LONG
   52- implement directly gsubsg [ was a macro calling a trivial wrapper ]
   53- optimize multiplication for quadratic t_POLMOD [ t_QUAD remains faster ]
   54- theta(q,z) very inefficient for large accuracies
   55- remove support for nf of the form [nf, change of variable] in
       nfnewprec() [#672]
   56- global() now obsolete and scheduled for removal
LGr57- 'make ctags' gctags-specific flags [ add #defines, typedefs ]
   58- prototype of nfsubfields [ 2nd argument GEN -> long ]
   59- allow t_FFELT in issquare / issquarerem / ispower
   60- sqrt(t_SER) now uses Newton iteration
   61- rename gissquarerem -> gissquareall, uissquarerem -> uissquareall,
       Z_issquarerem -> Z_issquareall (analogy with sqrtrem was faulty: we do
       not store a remainder but the square root)
BA 62- User functions are now regular variables holding values of type t_CLOSURE
   63- Output of \u is now sorted
   64- More explicit error messages in gp_history, e.g.
       ***   History result %10 not available [%1-%6]
BA 65- vecsmall_uniq(v) no longer assumes that v is sorted
   66- allow ellorder to handle curves over Fp, add an optional parameter to
       indicate a multiple of the order as in znorder.
   67- allow polcyclo(n, a) for an arbitrary a [ had to be a variable ] +
       major speedups: polcyclo(10^6) 5min -> 16ms. Similarly for polchebyshev,
       pollegendre and polhermite
   68- ?0 listed all "user-defined identifiers". Restrict to "functions"
   69- use simplify in setsearch() and Set() [#707]

  Added
    1- library functions expu, adduu, subuu
    2- library functions divisorsu, factor_pn_1 (using cyclotomic factors and
       Aurifeuille), merge_factor
    3- library function divru, dbllog2r
    4- library function ZX_gcd, ZX_isirreducible
    5- library function gtos
    6- library function pari_daemon
    7- library function Fp_sqr, padicsqrtlift
    7- library function RgXQ_inv
    8- bench 'extract'
    9- charpoly: Berkowitz division-free algorithm (new default) [#541]
   10- library function phiu
   11- library function mkvecsmalln
   12- library function chk_gerepileupto, dbg_gerepile, dbg_gerepileupto
   13- library function gen_sort_uniq, gen_indexsort_uniq+add flag 8 in vecsort
   14- library function remi2n, cmp_RgX, gen_cmp_RgX
   15- library function RgV_dotproduct, ZV_dotproduct, RgV_dotsquare, ZV_dotsquare, FpV_dotproduct, FpV_dotsquare
   16- library function FpX_Fp_add_shallow
   17- library function Q_pval
BA 18- new keyword "my" to declare lexically-scopped local variables. 
   19- new GP function listpop()
   20- library function RgX_inflate, RgX_deflate, Flx_inflate, Flx_deflate, poldeflate
   21- library function Fp_neg, Fp_add, Fp_sub
   22- library function ugcd
   23- library function vecinv, vecmul, vecpow, vecdiv, vecmodii
   24- library function RgM_isidentity, RgV_isin
   25- library function nfnewprec_shallow, bnfnewprec_shallow, bnrnewprec_shallow
   26- library function Zp_issquare
   27- library function dvmdsBIL, divsBIL, remsBIL
   28- library functions gassoc_proto, map_proto_G, map_proto_GG, map_proto_GL,
       map_proto_lG, map_proto_lGG, map_proto_lGL [ were private with
       other names ]
   29- default factor_proven
   30- experimental -balloon option to gphelp
LGr31- defaults graphcolormap, graphcolors [runtime-defined colormap for plots]
LGr32- bit 4096 [ complex ] to ploth
   33- member function .p / .mod for t_PADIC
   34- same mnemonic flags to plotrecth as in ploth
BA 35- member function .pol, .mod and .p for t_FFELT
BA 36- New type t_CLOSURE to store GP functions
   37- Ability to use arbitrary comparison functions in vecsort()
   38- library functions closure_callgen1, closure_callgen2, closure_callgen,
       closure_callgenvec.
   39- GP function apply(), select()
   40- library functions FF_issquare, FpXQ_issquare, Flxq_issquare
BA 41- library function vecsmall_uniq_sorted
   42- bench 'ff', 'exact0'
   43- has_getenv.c
   44- library function FpX_oneroot
   45- library function gcmpX
   46- library functions ZV_sort, ZV_sort_uniq, ZV_search

  Removed
    1- obsolete function kbessel2 (now static). Removed optional flag in besselk
    2- Removed obsolete optional flag in ellap(), Mod() and gcd()
    3- Rename gen_search_aux -> gen_search and document it [ old gen_search
       disappears: use tablesearch() ]
    4- undocumented library functions gpolylogz, polylog, polylogd, polylogp,
       polylogdold. Use polylog0 with appropriate flags.
    5- undocumented library function ghell2. Use ellheight0 with appropriate
       flag.
    6- obsolete function log0; use glog
    7- obsolete undocumented library function mpdivz, polzagreel, RgX_powers
       (use RgXQ_powers)
    8- obsolete undocumented library function sqred3
    9- the emacs/ directory: PariEmacs is now distributed separately.
   10- obsolete functions ellap0, apell2
   11- obsolete header file pariport.h
   12- obsolete error codes paramer1, valencer1, accurer, caracer1
   13- removed obsolete system-specific #ifdefs (macintosh, alliant)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Done for version 2.4.1 (released 28/03/2007):
  Fixed
    1- qflll / qflllgram (t_MAT with t_FRAC entries) would not reduce to the
       integer case (--> insufficient precision, SEGV) [#505]
    2- [Cygwin] missing -L... -lgmp when compiling with gmp.
    3- ispower(522^3) -> 0 [ looked like a 7th power to is_357_power(), which
       then forgot to test for cubes ] [#506]
LGr 4- [gphelp] race condition --> incomplete cleanup (improved patch BA)
    5- Cleanup library linking: do not link libpari with -ld [only gp], do
    not link gp with -lgmp [only libpari]. Side effect: libgmp.so no longer
    needed for modules compiled by gp2c-run
    6- when nf.disc < 0, nf.diff was an incorrect PARI ideal [#510]
    7- nf.codiff was only correct up to multiplication by some rational number
       (a divisor of nf.disc) [#510]
    8- inaccuracy (>= 2ulp) in [cached] log(2) [#498]
    9- exp, sinh, asinh, tanh, atanh were inaccurate near 0
   10- [GMP kernel] forvec(x=[[-1,0]],print(x)) --> error [#509]
       [ 'resetloop' failed when passing through '0' ]
   11- nfbasistoalg(nfinit(y),x) created an invalid t_POLMOD
   12- incorrect result in ZX_resultant (accuracy loss in bound computation)
   13- bnfinit(): avoid further precision problems for large degree fields
   14- [Configure] gcc-specific flags were used on linux/freebsd/cygwin, even
       when __gnuc__ was unset
   15- factor( pure power FqX ) --> SEGV
   16- [GMP kernel] polrootsmod(f, 4) --> wrong result [ low level t_INT
       manipulation not using the int_* macros ]
   17- polrootspadic(f, 2, r) --> some roots would be found twice [ due to
       FpX_roots(f, 4) called ]  [#521]
   18- ??sumalt doesn't compile: in GPHELP, treat \ref in verbatim mode [#518]
   20- matinverseimage returned [;] when no pre-image exists. Conform to
       the docs: "an empty vector or matrix", depending on the input types.
   21- [Configure] abort when $CFLAGS is not supported by $CC
   22- 3.5 % 2 --> error [ should be 0.5 ]
   23- sin(1/10^100) --> 0e-28 [ also affected cos,tan,cotan ]
   24- fix e.eta and elleta such that e.eta = 2 ellzeta(e,e.omega/2)
       [ was ellzeta(e,e.omega/2) ]. COMPAT.
   25- elleta(e) was different from elleta(e.omega). Analogous problems
       in all quasi-elliptic functions. COMPAT: change e.omega so that
       e.omega[1] / e.omega[2] belongs to the Poincare half plane [ used
       to be the inverse ]. Together with 24: the Legendre relation now reads
       w1 e2 - w2 e1 = 2 I Pi
       Rationale: 1) the action of Sl_2(R) becomes the standard one, not a
       twisted one 2) fixes quite a few normalization problems in our code.
   26- check that k >= 0 in thetanullk [#531]
   27- isprime(-2,1) returned 1
   28- Fix 'Not enough precision in thue' error
BA 29- [OS X] Fix kernel detection on x86_64-darwin
   30- Remove "VERY long time" Warning in bnfcertify (few minutes nowadays)
BA 31- missing prototype for documented function ZY_ZXY_rnfequation
   32- sqrt(x^2/y^2) --> SEGV [#536]
   33- \r foo no longer worked if foo was a directory and foo.gp a valid
       input file [#540]
BA 34- [Configure] spectacular failure to recognize gcc under some locales.
   35- polredabs(x^8+2*x^6-5*x^4+78*x^2+9) was incorrect [ missed
       x^8+6*x^6-x^4+54*x^2+25 due to incorrect "skipfirst" ]   [#542]
   36- typo in resmod2n (both kernels) [#546]
   37- At \p28, 0.1 - 0.1 would return 0.E-30 instead of 0.E-29
BA 38- missing prototype for documented function FpX_div_by_X_x
   39- isprime(,0) very slow when primelimit is large [#546]
   40- nfmodprinit could create FpX's which were not reduced mod p
   41- O(x^3)^(1/2) was O(x^2) instead of O(x)
RB 42- the following TODO item:
       v = vector(2); v[1] = v = 0  --> SEGV. Occurs with high probability if
       any variable is "deleted", while it (or part of it) is still in use
       Reference count could be helpful here.
   43- substpol(x^-2+O(x^-1),x^2,x) --> error [#555]
BA 44- [TLS] addss, addsr and subsr were not reentrant.

  Changed
    1- concat(t_VECSMALL, t_VECSMALL) to return the concatenated vector
       [was: a vector with two t_VECSMALL entries]
    2- pariprintf() so that it handles t_STR as print() [ don't include quotes ]
LGr 3- [Makefile] make generated src/funclist independent of locale
    4- Extend Pocklington-Lehmer to the case N-1 = FU, F > N^(1/3)
BA  5- Much faster base-2 to base-10 conversion.
BA  6- FpX_Fp_add() is now clean.
BA  7- rename ZY_ZXY_resultant -> ZX_ZXY_resultant, ZY_ZXY_rnfequation ->
       ZX_ZXY_rnfequation and FpY_FpXY_resultant -> FpX_FpXY_resultant.
BA  8- FpV_polint() now take a variable number as last parameter.
    9- use Miller-Rabin-like improvement in znprimroot and FpXQ_gener
   10- indexrank, indexsort and indexlexsort now return t_VECSMALLs
   11- API for gen_sort, vecsort

  Added
BA  1- derivnum(x=a,expr) for numerical derivations
BA  2- library function strntoGENstr
    3- function Vecrev
BA  4- ppc64 level0 inline assembly kernel
    5- library function floor_safe()
    6- library function itostr()
BA  7- library function Fp_div(), Fp_mul()
BA  8- library function FpXQ_norm()
BA  9- library functions FlxX_resultant() and Flx_FlxY_resultant()
BA 10- library function FlxY_Flx_div()
BA 11- library function Flm_transpose()
BA 12- library function Flx_Fl_add()
BA 13- library function Flxq_div()
BA 14- function stirling (Stirling numbers of 1st and 2nd kind)
BA 15- library function FpX_valrem()
   16- library function Flxq_gener
BA 17- library function Flxq_norm, Flxq_minpoly, Flxq_charpoly
BA 18- [toplevel benchmark] ffisom
BA 19- library functions Fp_order, FpXQ_order, FpXQ_log, FpXQ_sqrtn,
       Flxq_order, Flxq_log, Flxq_sqrtn
   20- library functions gen_sort_inplace, gen_indexsort, sort_factor,
       indexvecsort
BA 21- New PARI type t_FFELT and support functions (FF_*) for finite field
       elements.
BA 22- functions ffgen, fforder, fflog, ffprimroot for finite field elements.

  Removed
    1- obsolete functions readexpr(), readexpr_nobreak()
    2- pariemacs support from Configure
    3- obsolete functions sindexsort, sindexlexsort, sindexrank

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Done for version 2.4.0 (released 06/10/2006):
  Fixed
    1- typo in remiimul: wrong result in a "failsafe" branch (hardly ever
       taken). May affect modular powering /Fp if p >> 10^1300 [#457]
       Also affects the gmp kernel, for p >> 10^5800.
    2- rare accuracy problem in bnfinit
       P=x^8-787856*x^6+232721637848*x^4-30546112988506688*x^2+1503204734505922286224;
       setrand(1974190693); bnfinit(P) --> non invertible matrix in gauss
    3- inconsistent return type in nffactormod [#460]
    4- the following TODO item
        bnfinit may give wrong answers because we cheat on the value of
        Bach's bound, using B := 0.3 log^2 D by default, where 0.3 should
        really be 12 (under GRH). If the prime ideals of norm <= B do not
        generate the classgroup, we may not detect it, and compute junk. Ex:
        * setrand(3); bnfinit(y^4 + 1190*y^2 + 1416100).cyc
          --> [8,2,2,2]. The correct structure is [8,4,2].
        * setrand(1414185642); bnfinit(y^4 + 635*y^2 + 403225).reg
          [twice the correct value]
        * setrand(867341586); bnfinit(y^4-y^3+6122*y^2+6121*y+37466641).gen[2]
          [is principal]. Group structure and regulator are correct!
       Retune check_bach()
IZ  5- remove bogus test for "external help" (= ??)
IZ  6- [OS/2]: stack check [prevent oo recursion] present but not enabled
IZ  7- [OS/2]: bogus [BUG] in 'program' bench (install pb not detected)
    8- gammah(1+O(3^5)) --> incorrect type in ggamd.
    9- invalid read in copy_leaf [ SEGV in some libc ]
BA 10- ellheight short help was accidentally truncated.
   11- substpol(1+O(x^(2*n)),x^2,x) --> 1+O(x) instead of 1+O(x^n) [#470]
   12- [OS X] only use -no-cpp-precomp with Apple cc
   13- divrem(x,x,y) --> [1/y*x, 0]
   14- (1+x)/(1-x)/(1+x)^2 not simplified [#472]
   15- typo in qflll: in rare cases (exact input+floating point computation+
       precision increase in last-but-1 step), the returned base change is not
       properly updated in last iteration --> basis not LLL-reduced
   16- simplification missed in div_scal_rfrac() [ #473 ]
   17- ispower(x^k, k) would answer 0 for some x and k in {3,5,7} [#476]
   18- content(t_MAT with exactly 1 col) gave a wrong result
   19- random(N) was not uniformly distributed in [0,N-1] (use a reject
       strategy instead of moding out) [#210]
   20- rare bug in red_montgomery (returning 0 with + sign, an incorrect object)
       [ polrootspadic(x^11+x,11,10) --> corrupts gen_0 ]
   21- qfbsolve(Qfb(1,2,10),5) --> [0,0; 0,0] instead of 0 [#479]
   22- ispower(0, n, &z) would not set z
   23- wrong result in conversion t_QUAD -> t_PADIC whenever disc  = 1 (4)
JJ 24- gaddgsz macro was wrong [#481]
   25- gener_Fl(p^k) can't handle k > 1, use gener_Zl instead [#480]
SC 26- [GMP] mp_set_memory_functions was called with an incompatible realloc
       function. [#484]
   27- raising a t_QFI or t_QFR to the power n would return a reduced form (OK)
       except when n = 1. Make it systematic.
   28- in rare cases (return 0, native kernel) int_normalize was not suitable
       for gerepileupto
   29- idealnorm(nf, t_POL) didn't work
AM 30- [TeXmacs] typo in texmacs_output: x --> <bluex> [#491]
   31- accuracy errors in bnfinit: setrand(3); bnfinit(x^2+999999999999971)
       [ use a failsafe version of gmod (modr_safe), and increase accuracy
         if necessary ]
   32- possible corruption of gen_2 in mynegi() [ hnflll ]
   33- factor(4/x) --> [2, 2; x -1]  (content not removed)
BA 34- bnrstark prototype code was non-standard.
   35- rnfkummer(,,degree) often found too many fields [#482]
   36- loss of accuracy in p-adic ellinit: wrong digits and spurious errors:
       E.g i = 5; ellinit([1, -1, 1, -1, -14]*(1+O(17^i)))
   37- missing GC in forvec(,,2)
BA 38- Interrupting GP could lead to a freeze. [#488]
   39- possible stack corruption in charpoly(,1)
   40- Ser(x) raised an error [#499]

  Changed
    1- moved cgiv, gtofp to inline kernel
    2- reduce amount of memory needed by APRCL
    3- remove CPP from Configure tests (not needed)
    4- allow arbitrary sequences (not only expressions) in sum, prod, etc.
       sum(i = 1, 2, 1;2) --> 4  [ was: error ]
    5- checked that no 2-strong pseudoprime passes BSPW primality test up to
       10^15 (use Galway's list, extending Pinch's 10^13)
    6- random() now uses Brent's XORGEN (replaces congruential linear generator)
       getrand() returns the FSR internal state array, used by setrand(). The
       latter no longer returns the input seed. (Initial patch by RR)
    7- for install(): parser code 'E' is now obsolete, use 'I'
    8- if issquare(x, &n) == 1, always set n to a square root of x
    9- if ispower(x, k, &n) == 1, always set n to a k-root of x
   10- issquare(t_QFI or t_QFR) now is an error. Use explicitly
       issquare(component(x,1)) if you relied(?) on the old behaviour
   11- [library] rename gener_Fp -> pgener_Fp, gener_Fl -> pgener_Fp
       [ contrary to 'gener', these assume that their argument is prime ]
   12- [library] rename cyclo -> polcyclo, subcyclo -> polsubcyclo,
       tchebi -> polchebyshev1, legendre -> pollegendre
   13- restrict the types allowed in gaffect and gaffsg to scalar types and
       vectors of such.
   14- vecextract(x, bitmask) much faster [ read bits, don't use shifts ]
   15- improve hyperu
   16- remove gp-specific signal handler. Use the one in libpari
   17- [library] pol_1 and pol_x are no longer global arrays but functions
   18- [GMP] was inefficient for small sizes (e.g. 1-word operands)
   19- optimized rectplothrawin & plot (remove gaffect, use gtodouble
       whenever possible). Coordinate computations should be faster and more
       accurate.

  Added
BA  1- function Flm_rank
BA  2- Add experimental --enable-tls Configure option and thread-local stack
       support. Warning: using this option break the ABI.
    3- centerlift(t_PADIC)
    4- pgener_Zp, pgener_Zl
    5- dvdiu, dvdis, dvdiu, dvdsi, affgr
    6- cgetipos, cgetineg, togglesign
RM  7- polhermite, polchebyshev2
    8- allow rnf.zk and rnf.nf
    9- [toplevel benchmarks] bnfisintnorm, quadclassunit, rnfkummer
   10- ZX_factor, QX_factor
   11- allow gzip'ped elldata & galdata files
   12- allow t_VECSMALL in vecmin / vecmax
BA 13- add pari_stackcheck_init() function to control deep recursion detection
   14- Configure --tune flag

  Removed
    1- Odos/Makefile (no longer functional, obsolete)
    2- old CodeWarrior-specific hack (malloc)
    3- error code: intger2, affer3, overwriter
    4- useless static function gp_handle_SIGINT
    5- functions changevar() [ use substvec ] and reorder() [ use variable()
       to get the list of user variables ], global arrays pol_1[], pol_x[]
       ordvar[] and polvar[]

