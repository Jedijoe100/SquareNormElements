if test "$optimization" = profiling; then
  without_readline=yes
fi

#exported variables
_readline_list="readline readline_version RLINCLUDE RLLIBS"

readline=
if test -n "$with_readline"; then
  with_readline_lib="$with_readline_lib $with_readline/lib"
  with_readline_include="$with_readline_include $with_readline/include"
fi
if test -z "$without_readline"; then
  pth="$with_readline_lib $libpth"
  lib=readline; . ./locatelib
  rl_fullname=$try
fi

if test -n "$readline"; then
# Readline -- Headers
  pth="$with_readline_include $basic_include_path"
  x=`./locate 'readline/readline.h' '' $pth`
  case $x in
   ?:/*|/*) rl_include=`dirname $x`
     echo ..."Found readline header in $rl_include";;
    *) echo ..."But no header file has been found"
       readline=;;
  esac
fi

if test -n "$readline"; then
  pth="$libpth"
# Readline -- TermCap
  lib=$rl_fullname; sym=tgetent; . ./locatesymbol
  need_tgetent="$try"
  if test -n "$need_tgetent"; then
    opth=$pth; pth="$with_ncurses_lib $libpth"
    lib=ncurses; . ./locatelib
    if test -n "$try"; then # ncurses found. Does it contain tgetent ?
      lib=$try; . ./locatesymbol
    fi
    pth=$opth
    if test -n "$try"; then
      rl_ncurses=$ncurses
      need_tgetent=
    else # give termcap a try
      lib=termcap; . ./locatelib
      if test -n "$try"; then
        rl_termcap=$termcap
        need_tgetent=
      fi
    fi
  fi
# Readline -- CFLAGS
  if (echo $rl_include | grep "readline$" > /dev/null); then
    rl_include=`dirname $rl_include`
    RLINCLUDE="-I$rl_include"
  fi
  RLLIBS="-L$readline -lreadline"
  if test -n "$rl_ncurses"; then
    echo ..."Library ncurses needed by readline"
    RLLIBS="$RLLIBS -L$rl_ncurses -lncurses"
  fi
  if test -n "$rl_termcap"; then
    echo ..."Library termcap needed by readline"
    RLLIBS="$RLLIBS -L$rl_termcap -ltermcap"
  fi
# Readline -- last chance for tgetent
  if test -n "$need_tgetent"; then # try to compile anyway (in libc?)
    list=readline; extra_flags="$RLLIBS $RLINCLUDE"; ./look
    if test "$has_readline" = no; then
      echo "cannot use readline: please install libncurses or libtermcap."
      readline=
    fi
  fi
fi

if test -n "$readline"; then
  exe=$osname-$arch-rlv$$
  $CC $CFLAGS $extraflag $RLINCLUDE -o $exe rl_version.c $RLLIBS 2> /dev/null
  if test -r $exe; then
    readline_version=`env LD_LIBRARY_PATH="$LD_LIBRARY_PATH$dir_sep$readline" $RUNTEST $exe`;
  else
    readline_version="?.?";
  fi
  rm -f $exe $exe$exe_suff;
  case "$readline_version" in
  *Editline*|*EditLine*) readline=
    echo "###"
    echo "### Editline wrapper detected, building without readline support"
    echo "###";;
  \?.\?) readline=
    echo "###"
    echo "### Readline library detected, but does not seem to work"
    echo "###";;
  esac
fi

if test -n "$readline"; then
  if test "$fastread" != yes; then
    cat << EOM
==========================================================================
GNU readline provides line editing in the gp shell, with history and
context-dependent completions. You should really answer 'yes' to the
following question, unless you are trying to overcome a problem in
the default build.
EOM
    echo $n "Do you want to use GNU readline library within GP ? $c"
    rep='y n'; dflt=y; . ./myread
    case $ans in
      n) readline=;;
    esac
  fi
fi

if test -z "$readline"; then
  echo "### Building without GNU readline support"
  RLLIBS=
  RLINCLUDE=
else
  echo "Using GNU readline, version $readline_version"
fi
