#!/usr/bin/perl -w
use PARI::822;

$class=$ARGV[0];

%secnumber=(
  'operators'          =>  1 ,
  'conversions'        =>  2 ,
  'transcendental'     =>  3 ,
  'number_theoretical' =>  4 ,
  'elliptic_curves'    =>  5 ,
  'number_fields'      =>  6 ,
  'polynomials'        =>  7 ,
  'linear_algebra'     =>  8 ,
  'sums'               =>  9 ,
  'graphic'            => 10 ,
  'programming'        => 11 
);

print <<EOF;
/* This file is autogenerated from the database. */
/* See src/desc/Def */
/* Do not edit*/
EOF
print "entree functions_${class}[]={\n";
%valence=(
"Gp" => 1,
"GG" => 2,
"GGG" => 3,
"GGGG" => 4,
"lG" => 10,
"L" => 11,
"GnP" => 12,
"GDn" => 14,
"G" => 18,
"lGG" => 20,
"GL" => 21,
"GVE" => 22,
#"GL" => 23,
"LG" => 24,
"GGD0,L," => 25,
"GnG" => 26,
"V=GEp" => 27,
"GDVDI" => 28,
"GGp" => 29,
"lGGG" => 30,
"GDGDGD&" => 31,
"GGL" => 32,
"GGGD0,L,p" =>33,
"V=GGEp" => 37,
"V=GGEDG" => 47,
"GGDVDVDI" => 49,
"GDGDGD0,L,p" => 62,
"vV=GGI" => 83,
"vGVI" => 84,
"vV=GGGI" => 86,
"vV=GID0,L," => 87,
"GD0,L,DGp" => 91
);
%spec_valence=(
"O" => 50,
"if" => 80,
"while" => 81,
"until" => 82,
"global" => 88
);
$/="\n;";
PARI::822::read(\%funcs,$ARGV[1]);
foreach my $name (sort keys %funcs)
{
      my %func=%{$funcs{$name}};
      next if ($func{'Class'} ne $class);
      my $gpname=$func{'Function'};
      defined($func{'Section'}) or die("No section for $name");
      my $sec=$secnumber{$func{'Section'}};
      defined($sec) or $sec=0;
      my $proto=$func{'Prototype'};
      my $cname=$func{'C-Name'};
      if (defined($cname))
      {
        my $fproto=$proto;
        $proto =~ s/^[vl]//;
        if ($proto eq "" || $proto =~ /^(s\*)|[DpP]/)
        {
          $valence=0;
        }
        else
        {
          $valence=defined($valence{$fproto})?$valence{$fproto}:99;
        }
        print "{\"$gpname\",$valence,(void*)$cname,$sec,\"$fproto\"},\n";
      }
      else
      {
        $valence=defined($spec_valence{$gpname})?$spec_valence{$gpname}:0;
        print "{\"$gpname\",$valence,NULL,$sec,NULL},\n";
      }
}
print <<'EOF';
{NULL,0,NULL,0,NULL} /* sentinel */
};
EOF
