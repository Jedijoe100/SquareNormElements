Function: qflllgram
Section: linear_algebra
C-Name: qflllgram0
Prototype: GD0,L,p
Help: qflllgram(G,{flag=0}): LLL reduction of the lattice whose gram matrix
 is G (gives the unimodular transformation matrix). flag is optional and can
 be 0: default,1: lllgramint algorithm for integer matrices, 4: lllgramkerim
 giving the kernel and the LLL reduced image, 5: lllgramkerimgen same when
 the matrix has polynomial coefficients, 8: lllgramgen, same as qflllgram
 when the coefficients are polynomials
Doc: same as \kbd{qflll}, except that the
 matrix $G = \kbd{x\til * x}$ is the Gram matrix of some lattice vectors $x$,
 and not the coordinates of the vectors themselves. In particular, $G$ must
 now be a square symmetric real matrix, corresponding to a positive definite
 quadratic form. The result is a unimodular transformation matrix $T$ such
 that $x \cdot T$ is an LLL-reduced basis of the lattice generated by the
 column vectors of $x$.
 
 If $\fl=0$ (default): the computations are done with floating point numbers,
 using Householder matrices for orthogonalization. If $G$ has integral
 entries, then computations are nonetheless approximate, with precision
 varying as needed (Lehmer's trick, as generalized by Schnorr).
 
 If $\fl=1$: $G$ has integer entries, still positive but not necessarily
 definite (i.e~$x$ needs not have maximal rank). The computations are all
 done in integers and should be slower than the default, unless the latter
 triggers accuracy problems.
 
 $\fl=4$: $G$ has integer entries, gives the kernel and reduced image of $x$.
 
 $\fl=5$: same as case $4$, but $G$ may have polynomial coefficients.
 
 \syn{qflllgram0}{G,\fl,\var{prec}}. Also available are
 \funs{lllgram}{G,\var{prec}} ($\fl=0$), \funs{lllgramint}{G} ($\fl=1$), and
 \funs{lllgramkerim}{G} ($\fl=4$).

