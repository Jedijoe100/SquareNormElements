This is a branch with a function that finds elements of square norm in a 
number field generated by an irreducible polynomial f(x) that are not 
squares in that number field.

Install as you would normally do with PARI.

This is the implemented function
random_units(GEN P, int flag, int max_time, int max_rel, int n_units, int n_val, long prec)
 - P is the generating polynomial
 - flag specifies what mode you are in
 -- 0 runs until it finds sufficient units
 -- 1 runs until it reaches maximum time
 -- 2 runs until it reaches the maximum number of relations
 -- 3 runs until either 1 or 2 have been met
 - max_time is the maximum time 
 - max_rel is the maximum number of relations
 - n_units is the number of units wanted
 - n_val is the number of relations generated in each batch 20 is a good number for this
 - prec is the precision used
It if it finds units it returns a list of famat PARI objects, that is it returns 
a list of elements in factorised form.

The PARI version based on is below
=========================================================================

This is PARI/GP, version 2.10.x (*).

PARI/GP Number Theory-oriented Computer Algebra System
        Copyright (C) 2000-2016 The PARI Group, Bordeaux.

==========================================================================

To get started, run

  cd doc; tex INSTALL.tex

and have a look at the file INSTALL.dvi, extracted verbatim from Appendix A
of the User Manual. (Or pdftex INSTALL.tex if PDF files are more convenient.)
If you are in a hurry, look at the ASCII file 'INSTALL' but a lot of
information is missing there.

Once 'Configure' has been run, 'make doc' typesets separate user's manual for
GP and libpari, a tutorial and reference card in directory doc.

See the files NEW and COMPAT for new features and incompatible changes
respectively between 2.7 and older versions. See CHANGES-* for a terse
description of subsequent patches.

For the adventurous: to check out bleeding-edge development versions of
PARI/GP, see the file README-git.

Afterwards, you're on your own.

==========================================================================

There are three mailing lists devoted to the PARI/GP package, and most
feedback should be directed to those. They are:

* pari-announce: to announce major version changes. You can't write to this
one, but you should probably subscribe.

* pari-dev: for everything related to the development of PARI, including
suggestions, technical questions, bug reports or patch submissions.

* pari-users: for everything else.

To subscribe, send empty messages respectively to

   pari-announce-request@pari.math.u-bordeaux.fr
   pari-users-request@pari.math.u-bordeaux.fr
   pari-dev-request@pari.math.u-bordeaux.fr

with a Subject: containing the word "subscribe".

If you are not a member of any of those lists and do not want to become
one, you can write to us at

  pari@math.u-bordeaux.fr

We may forward your mail to the lists above and will definitely try to
correct faulty behaviour, if necessary. But we cannot promise that you
will get an individual answer.

Last but not least, PARI home page can be found at

  http://pari.math.u-bordeaux.fr/

  Thanks for your support, and have fun !

========================================================================

PARI/GP is free software; you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version. It is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY WHATSOEVER.

Check the License for details. You should have received a copy of it, along
with the package; see the file 'COPYING'. If not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


(*) Version numbers have the shape: MAJOR.MINOR.patchlevel.status. The status
increases through {alpha, beta, release}. New features are introduced during
the `alpha' phase, tested during `beta', and declared stable when `release'
is reached.
The MAJOR version number will not change for a while.
The MINOR version number increases by 2 when a new status cycle starts (as
soon as a 'release' version is out): odd numbers are reserved for 'released'
versions, even ones for alpha/beta phase.
The patchlevel goes up each time we feel an upgrade is necessary (improvement
or bugfix). 'Release' versions may be updated with further patchlevels if
important bugs need to be fixed before the next cycle reaches completion.
